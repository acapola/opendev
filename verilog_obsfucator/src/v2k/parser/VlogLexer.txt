ANTLR-generated file resulting from grammar Vlog.g
Diagnostic output

Terence Parr, MageLang Institute
with John Lilley, Empathy Software
ANTLR Version 2.7.7 (20080509); 1989-2005

*** Header Action.
This action will appear at the top of all generated files.
	
	/*
	*************************************************************************
	*************************************************************************
	**                                                                     **
	**  V2KPARSE                                                           **
	**  Copyright (C) 2008-2009    Karl W. Pfalzer                         **
	**                                                                     **
	**  This program is free software; you can redistribute it and/or      **
	**  modify it under the terms of the GNU General Public License        **
	**  as published by the Free Software Foundation; either version 2     **
	**  of the License, or (at your option) any later version.             **
	**                                                                     **
	**  This program is distributed in the hope that it will be useful,    **
	**  but WITHOUT ANY WARRANTY; without even the implied warranty of     **
	**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      **
	**  GNU General Public License for more details.                       **
	**                                                                     **
	**  You should have received a copy of the GNU General Public License  **
	**  along with this program; if not, write to the                      **
	**  Free Software Foundation, Inc.                                     **
	**  51 Franklin Street, Fifth Floor                                    **
	**  Boston, MA  02110-1301, USA.                                       **
	**                                                                     **
	*************************************************************************
	*************************************************************************
	*/
	package v2k.parser;
	import  v2k.parser.tree.*;
	
*** End of Header Action


*** Lexer Preamble Action.
This action will appear before the declaration of your lexer class:
	
*** End of Lexer Preamble Action

*** Your lexer class is called 'VlogLexer' and is a subclass of 'CharScanner'.

*** User-defined lexer  class members:
These are the member declarations that you defined for your class:
	
*** End of user-defined lexer class members

*** String literals used in the parser
The following string literals were used in the parser.
An actual code generator would arrange to place these literals
into a table in the generated lexer, so that actions in the
generated lexer could match token text against the literals.
String literals used in the lexer are not listed here, as they
are incorporated into the mainstream lexer processing.
*** End of string literals used by the parser

*** Lexer nextToken rule:
The lexer nextToken rule is synthesized from all of the user-defined
lexer rules.  It logically consists of one big alternative block with
each user-defined rule being an alternative.

Start of an alternative block.
	The lookahead set for this block is:
		k==1: {
			'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
			'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
			'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
			'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
			'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
			'\u001d', '\u001e', '\u001f', ' ', '!', '"', 
			'#', '$', '%', '&', '\'', '(', 
			')', '*', '+', ',', '-', '.', 
			'/', '0', '1', '2', '3', '4', 
			'5', '6', '7', '8', '9', ':', 
			';', '<', '=', '>', '?', '@', 
			'A', 'B', 'C', 'D', 'E', 'F', 
			'G', 'H', 'I', 'J', 'K', 'L', 
			'M', 'N', 'O', 'P', 'Q', 'R', 
			'S', 'T', 'U', 'V', 'W', 'X', 
			'Y', 'Z', '[', '\\', ']', '^', 
			'_', '`', 'a', 'b', 'c', 'd', 
			'e', 'f', 'g', 'h', 'i', 'j', 
			'k', 'l', 'm', 'n', 'o', 'p', 
			'q', 'r', 's', 't', 'u', 'v', 
			'w', 'x', 'y', 'z', '{', '|', 
			'}', '~', '\u007f', '\u0080', '\u0081', '\u0082', 
			'\u0083', '\u0084', '\u0085', '\u0086', '\u0087', '\u0088', 
			'\u0089', '\u008a', '\u008b', '\u008c', '\u008d', '\u008e', 
			'\u008f', '\u0090', '\u0091', '\u0092', '\u0093', '\u0094', 
			'\u0095', '\u0096', '\u0097', '\u0098', '\u0099', '\u009a', 
			'\u009b', '\u009c', '\u009d', '\u009e', '\u009f', '\u00a0', 
			'\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', 
			'\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', 
			'\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', 
			'\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', 
			'\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', 
			'\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', 
			'\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', 
			'\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', 
			'\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', 
			'\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', 
			'\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', 
			'\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', 
			'\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', 
			'\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', 
			'\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', 
			'\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
		 }
		k==2: {
			'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
			'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
			'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
			'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
			'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
			'\u001d', '\u001e', '\u001f', ' ', '!', '"', 
			'#', '$', '%', '&', '\'', '(', 
			')', '*', '+', ',', '-', '.', 
			'/', '0', '1', '2', '3', '4', 
			'5', '6', '7', '8', '9', ':', 
			';', '<', '=', '>', '?', '@', 
			'A', 'B', 'C', 'D', 'E', 'F', 
			'G', 'H', 'I', 'J', 'K', 'L', 
			'M', 'N', 'O', 'P', 'Q', 'R', 
			'S', 'T', 'U', 'V', 'W', 'X', 
			'Y', 'Z', '[', '\\', ']', '^', 
			'_', '`', 'a', 'b', 'c', 'd', 
			'e', 'f', 'g', 'h', 'i', 'j', 
			'k', 'l', 'm', 'n', 'o', 'p', 
			'q', 'r', 's', 't', 'u', 'v', 
			'w', 'x', 'y', 'z', '{', '|', 
			'}', '~', '\u007f', '\u0080', '\u0081', '\u0082', 
			'\u0083', '\u0084', '\u0085', '\u0086', '\u0087', '\u0088', 
			'\u0089', '\u008a', '\u008b', '\u008c', '\u008d', '\u008e', 
			'\u008f', '\u0090', '\u0091', '\u0092', '\u0093', '\u0094', 
			'\u0095', '\u0096', '\u0097', '\u0098', '\u0099', '\u009a', 
			'\u009b', '\u009c', '\u009d', '\u009e', '\u009f', '\u00a0', 
			'\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', 
			'\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', 
			'\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', 
			'\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', 
			'\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', 
			'\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', 
			'\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', 
			'\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', 
			'\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', 
			'\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', 
			'\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', 
			'\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', 
			'\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', 
			'\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', 
			'\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', 
			'\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
		 }
		k==3: {
			'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
			'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
			'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
			'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
			'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
			'\u001d', '\u001e', '\u001f', ' ', '!', '"', 
			'#', '$', '%', '&', '\'', '(', 
			')', '*', '+', ',', '-', '.', 
			'/', '0', '1', '2', '3', '4', 
			'5', '6', '7', '8', '9', ':', 
			';', '<', '=', '>', '?', '@', 
			'A', 'B', 'C', 'D', 'E', 'F', 
			'G', 'H', 'I', 'J', 'K', 'L', 
			'M', 'N', 'O', 'P', 'Q', 'R', 
			'S', 'T', 'U', 'V', 'W', 'X', 
			'Y', 'Z', '[', '\\', ']', '^', 
			'_', '`', 'a', 'b', 'c', 'd', 
			'e', 'f', 'g', 'h', 'i', 'j', 
			'k', 'l', 'm', 'n', 'o', 'p', 
			'q', 'r', 's', 't', 'u', 'v', 
			'w', 'x', 'y', 'z', '{', '|', 
			'}', '~', '\u007f', '\u0080', '\u0081', '\u0082', 
			'\u0083', '\u0084', '\u0085', '\u0086', '\u0087', '\u0088', 
			'\u0089', '\u008a', '\u008b', '\u008c', '\u008d', '\u008e', 
			'\u008f', '\u0090', '\u0091', '\u0092', '\u0093', '\u0094', 
			'\u0095', '\u0096', '\u0097', '\u0098', '\u0099', '\u009a', 
			'\u009b', '\u009c', '\u009d', '\u009e', '\u009f', '\u00a0', 
			'\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', 
			'\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', 
			'\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', 
			'\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', 
			'\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', 
			'\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', 
			'\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', 
			'\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', 
			'\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', 
			'\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', 
			'\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', 
			'\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', 
			'\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', 
			'\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', 
			'\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', 
			'\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
		 }
	This block has multiple alternatives:
		
		Alternate(1) will be taken IF:
		The lookahead set: 
			{ '@' }
		is matched.
		Rule Reference: mAT
		
		Otherwise, Alternate(2) will be taken IF:
		The lookahead set: 
			{ ':' }
		is matched.
		Rule Reference: mCOLON
		
		Otherwise, Alternate(3) will be taken IF:
		The lookahead set: 
			{ ',' }
		is matched.
		Rule Reference: mCOMMA
		
		Otherwise, Alternate(4) will be taken IF:
		The lookahead set: 
			{ '.' }
		is matched.
		Rule Reference: mDOT
		
		Otherwise, Alternate(5) will be taken IF:
		The lookahead set: 
			k==1: {'=' }
			k==2: { }
		is matched.
		Rule Reference: mASSIGN
		
		Otherwise, Alternate(6) will be taken IF:
		The lookahead set: 
			k==1: {'-' }
			k==2: { }
		is matched.
		Rule Reference: mMINUS
		
		Otherwise, Alternate(7) will be taken IF:
		The lookahead set: 
			{ '[' }
		is matched.
		Rule Reference: mLBRACK
		
		Otherwise, Alternate(8) will be taken IF:
		The lookahead set: 
			{ ']' }
		is matched.
		Rule Reference: mRBRACK
		
		Otherwise, Alternate(9) will be taken IF:
		The lookahead set: 
			{ '{' }
		is matched.
		Rule Reference: mLCURLY
		
		Otherwise, Alternate(10) will be taken IF:
		The lookahead set: 
			{ '}' }
		is matched.
		Rule Reference: mRCURLY
		
		Otherwise, Alternate(11) will be taken IF:
		The lookahead set: 
			{ '(' }
		is matched.
		Rule Reference: mLPAREN
		
		Otherwise, Alternate(12) will be taken IF:
		The lookahead set: 
			{ ')' }
		is matched.
		Rule Reference: mRPAREN
		
		Otherwise, Alternate(13) will be taken IF:
		The lookahead set: 
			{ '#' }
		is matched.
		Rule Reference: mPOUND
		
		Otherwise, Alternate(14) will be taken IF:
		The lookahead set: 
			{ '?' }
		is matched.
		Rule Reference: mQMARK
		
		Otherwise, Alternate(15) will be taken IF:
		The lookahead set: 
			{ ';' }
		is matched.
		Rule Reference: mSEMI
		
		Otherwise, Alternate(16) will be taken IF:
		The lookahead set: 
			k==1: {'+' }
			k==2: { }
		is matched.
		Rule Reference: mPLUS
		
		Otherwise, Alternate(17) will be taken IF:
		The lookahead set: 
			k==1: {'+' }
			k==2: {':' }
		is matched.
		Rule Reference: mPLUS_COLON
		
		Otherwise, Alternate(18) will be taken IF:
		The lookahead set: 
			k==1: {'-' }
			k==2: {':' }
		is matched.
		Rule Reference: mMINUS_COLON
		
		Otherwise, Alternate(19) will be taken IF:
		The lookahead set: 
			k==1: {'!' }
			k==2: { }
		is matched.
		Rule Reference: mLNOT
		
		Otherwise, Alternate(20) will be taken IF:
		The lookahead set: 
			k==1: {'~' }
			k==2: { }
		is matched.
		Rule Reference: mBNOT
		
		Otherwise, Alternate(21) will be taken IF:
		The lookahead set: 
			k==1: {'&' }
			k==2: { }
		is matched.
		Rule Reference: mBAND
		
		Otherwise, Alternate(22) will be taken IF:
		The lookahead set: 
			k==1: {'~' }
			k==2: {'&' }
		is matched.
		Rule Reference: mRNAND
		
		Otherwise, Alternate(23) will be taken IF:
		The lookahead set: 
			k==1: {'|' }
			k==2: { }
		is matched.
		Rule Reference: mBOR
		
		Otherwise, Alternate(24) will be taken IF:
		The lookahead set: 
			k==1: {'~' }
			k==2: {'|' }
		is matched.
		Rule Reference: mRNOR
		
		Otherwise, Alternate(25) will be taken IF:
		The lookahead set: 
			k==1: {'^' }
			k==2: { }
		is matched.
		Rule Reference: mBXOR
		
		Otherwise, Alternate(26) will be taken IF:
		The lookahead set: 
			k==1: {'^', '~' }
			k==2: {'^', '~' }
		is matched.
		Rule Reference: mRXNOR
		
		Otherwise, Alternate(27) will be taken IF:
		The lookahead set: 
			k==1: {'*' }
			k==2: { }
		is matched.
		Rule Reference: mSTAR
		
		Otherwise, Alternate(28) will be taken IF:
		The lookahead set: 
			k==1: {'*' }
			k==2: {'*' }
		is matched.
		Rule Reference: mSTAR2
		
		Otherwise, Alternate(29) will be taken IF:
		The lookahead set: 
			k==1: {'/' }
			k==2: { }
		is matched.
		Rule Reference: mDIV
		
		Otherwise, Alternate(30) will be taken IF:
		The lookahead set: 
			{ '%' }
		is matched.
		Rule Reference: mMOD
		
		Otherwise, Alternate(31) will be taken IF:
		The lookahead set: 
			k==1: {'=' }
			k==2: {'=' }
			k==3: { }
		is matched.
		Rule Reference: mEQUAL
		
		Otherwise, Alternate(32) will be taken IF:
		The lookahead set: 
			k==1: {'!' }
			k==2: {'=' }
			k==3: { }
		is matched.
		Rule Reference: mNOT_EQ
		
		Otherwise, Alternate(33) will be taken IF:
		The lookahead set: 
			k==1: {'!' }
			k==2: {'=' }
			k==3: {'=' }
		is matched.
		Rule Reference: mNOT_EQ_CASE
		
		Otherwise, Alternate(34) will be taken IF:
		The lookahead set: 
			k==1: {'=' }
			k==2: {'=' }
			k==3: {'=' }
		is matched.
		Rule Reference: mEQ_CASE
		
		Otherwise, Alternate(35) will be taken IF:
		The lookahead set: 
			k==1: {'&' }
			k==2: {'&' }
		is matched.
		Rule Reference: mLAND
		
		Otherwise, Alternate(36) will be taken IF:
		The lookahead set: 
			k==1: {'|' }
			k==2: {'|' }
		is matched.
		Rule Reference: mLOR
		
		Otherwise, Alternate(37) will be taken IF:
		The lookahead set: 
			k==1: {'<' }
			k==2: { }
		is matched.
		Rule Reference: mLT_
		
		Otherwise, Alternate(38) will be taken IF:
		The lookahead set: 
			k==1: {'<' }
			k==2: {'=' }
		is matched.
		Rule Reference: mLE
		
		Otherwise, Alternate(39) will be taken IF:
		The lookahead set: 
			k==1: {'>' }
			k==2: { }
		is matched.
		Rule Reference: mGT
		
		Otherwise, Alternate(40) will be taken IF:
		The lookahead set: 
			k==1: {'>' }
			k==2: {'=' }
		is matched.
		Rule Reference: mGE
		
		Otherwise, Alternate(41) will be taken IF:
		The lookahead set: 
			k==1: {'>' }
			k==2: {'>' }
			k==3: { }
		is matched.
		Rule Reference: mSR
		
		Otherwise, Alternate(42) will be taken IF:
		The lookahead set: 
			k==1: {'<' }
			k==2: {'<' }
			k==3: { }
		is matched.
		Rule Reference: mSL
		
		Otherwise, Alternate(43) will be taken IF:
		The lookahead set: 
			k==1: {'>' }
			k==2: {'>' }
			k==3: {'>' }
		is matched.
		Rule Reference: mSR3
		
		Otherwise, Alternate(44) will be taken IF:
		The lookahead set: 
			k==1: {'<' }
			k==2: {'<' }
			k==3: {'<' }
		is matched.
		Rule Reference: mSL3
		
		Otherwise, Alternate(45) will be taken IF:
		The lookahead set: 
			k==1: {'-' }
			k==2: {'>' }
		is matched.
		Rule Reference: mTRIGGER
		
		Otherwise, Alternate(46) will be taken IF:
		The lookahead set: 
			k==1: {'=' }
			k==2: {'>' }
		is matched.
		Rule Reference: mPPATH
		
		Otherwise, Alternate(47) will be taken IF:
		The lookahead set: 
			k==1: {'*' }
			k==2: {'>' }
		is matched.
		Rule Reference: mFPATH
		
		Otherwise, Alternate(48) will be taken IF:
		The lookahead set: 
			{ '`' }
		is matched.
		Rule Reference: mTIC_DIRECTIVE
		
		Otherwise, Alternate(49) will be taken IF:
		The lookahead set: 
			{ 
				'A', 'B', 'C', 'D', 'E', 
				'F', 'G', 'H', 'I', 'J', 'K', 
				'L', 'M', 'N', 'O', 'P', 'Q', 
				'R', 'S', 'T', 'U', 'V', 'W', 
				'X', 'Y', 'Z', '_', 'a', 'b', 
				'c', 'd', 'e', 'f', 'g', 'h', 
				'i', 'j', 'k', 'l', 'm', 'n', 
				'o', 'p', 'q', 'r', 's', 't', 
				'u', 'v', 'w', 'x', 'y', 'z'
			 }
		is matched.
		Rule Reference: mIDENT
		
		Otherwise, Alternate(50) will be taken IF:
		The lookahead set: 
			{ '"' }
		is matched.
		Rule Reference: mSTRING
		
		Otherwise, Alternate(51) will be taken IF:
		The lookahead set: 
			{ '\\' }
		is matched.
		Rule Reference: mESCAPED_IDENT
		
		Otherwise, Alternate(52) will be taken IF:
		The lookahead set: 
			{ '$' }
		is matched.
		Rule Reference: mSYSTEM_TASK_NAME
		
		Otherwise, Alternate(53) will be taken IF:
		The lookahead set: 
			{ 
				'\'', '0', '1', '2', '3', 
				'4', '5', '6', '7', '8', '9'
			 }
		is matched.
		Rule Reference: mNUMBER
		
		Otherwise, Alternate(54) will be taken IF:
		The lookahead set: 
			{ 
				'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
				'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
				'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
				'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
				'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
				'\u001d', '\u001e', '\u001f', ' ', '\u007f', '\u0080', 
				'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
				'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
				'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
				'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
				'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
				'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
				'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
				'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
				'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
				'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
				'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
				'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
				'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
				'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
				'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
				'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
				'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
				'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
				'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
				'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
				'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
				'\u00ff'
			 }
		is matched.
		Rule Reference: mWS
		
		Otherwise, Alternate(55) will be taken IF:
		The lookahead set: 
			k==1: {'/' }
			k==2: {'/' }
		is matched.
		Rule Reference: mSL_COMMENT
		
		Otherwise, Alternate(56) will be taken IF:
		The lookahead set: 
			k==1: {'/' }
			k==2: {'*' }
		is matched.
		Rule Reference: mML_COMMENT
		
		OTHERWISE, a NoViableAlt exception will be thrown
		
	End of alternatives
End of alternative block.
*** End of nextToken lexer rule.

*** User-defined Lexer rules:
	
	*** Lexer Rule: mAT
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '@' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '@' }
			is matched.
			Match character '@'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mAT
	
	*** Lexer Rule: mCOLON
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ ':' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ ':' }
			is matched.
			Match character ':'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mCOLON
	
	*** Lexer Rule: mCOMMA
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ ',' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ ',' }
			is matched.
			Match character ','
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mCOMMA
	
	*** Lexer Rule: mDOT
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '.' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '.' }
			is matched.
			Match character '.'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mDOT
	
	*** Lexer Rule: mASSIGN
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '=' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '=' }
			is matched.
			Match character '='
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mASSIGN
	
	*** Lexer Rule: mMINUS
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '-' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '-' }
			is matched.
			Match character '-'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mMINUS
	
	*** Lexer Rule: mLBRACK
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '[' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '[' }
			is matched.
			Match character '['
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mLBRACK
	
	*** Lexer Rule: mRBRACK
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ ']' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ ']' }
			is matched.
			Match character ']'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mRBRACK
	
	*** Lexer Rule: mLCURLY
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '{' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '{' }
			is matched.
			Match character '{'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mLCURLY
	
	*** Lexer Rule: mRCURLY
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '}' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '}' }
			is matched.
			Match character '}'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mRCURLY
	
	*** Lexer Rule: mLPAREN
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '(' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '(' }
			is matched.
			Match character '('
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mLPAREN
	
	*** Lexer Rule: mRPAREN
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ ')' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ ')' }
			is matched.
			Match character ')'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mRPAREN
	
	*** Lexer Rule: mPOUND
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '#' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '#' }
			is matched.
			Match character '#'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mPOUND
	
	*** Lexer Rule: mQMARK
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '?' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '?' }
			is matched.
			Match character '?'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mQMARK
	
	*** Lexer Rule: mSEMI
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ ';' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ ';' }
			is matched.
			Match character ';'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mSEMI
	
	*** Lexer Rule: mPLUS
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '+' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '+' }
			is matched.
			Match character '+'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mPLUS
	
	*** Lexer Rule: mPLUS_COLON
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '+' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '+' }
			is matched.
			Match string literal "+:"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mPLUS_COLON
	
	*** Lexer Rule: mMINUS_COLON
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '-' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '-' }
			is matched.
			Match string literal "-:"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mMINUS_COLON
	
	*** Lexer Rule: mLNOT
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '!' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '!' }
			is matched.
			Match character '!'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mLNOT
	
	*** Lexer Rule: mBNOT
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '~' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '~' }
			is matched.
			Match character '~'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mBNOT
	
	*** Lexer Rule: mBAND
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '&' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '&' }
			is matched.
			Match character '&'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mBAND
	
	*** Lexer Rule: mRNAND
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '~' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '~' }
			is matched.
			Match string literal "~&"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mRNAND
	
	*** Lexer Rule: mBOR
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '|' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '|' }
			is matched.
			Match character '|'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mBOR
	
	*** Lexer Rule: mRNOR
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '~' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '~' }
			is matched.
			Match string literal "~|"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mRNOR
	
	*** Lexer Rule: mBXOR
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '^' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '^' }
			is matched.
			Match character '^'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mBXOR
	
	*** Lexer Rule: mRXNOR
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '^', '~' }
			This block has multiple alternatives:
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ '~' }
				is matched.
				Match string literal "~^"
				
				Otherwise, Alternate(2) will be taken IF:
				The lookahead set: 
					{ '^' }
				is matched.
				Match string literal "^~"
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternatives
		End of alternative block.
	*** End Lexer Rule: mRXNOR
	
	*** Lexer Rule: mSTAR
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '*' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '*' }
			is matched.
			Match character '*'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mSTAR
	
	*** Lexer Rule: mSTAR2
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '*' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '*' }
			is matched.
			Match string literal "**"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mSTAR2
	
	*** Lexer Rule: mDIV
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '/' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '/' }
			is matched.
			Match character '/'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mDIV
	
	*** Lexer Rule: mMOD
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '%' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '%' }
			is matched.
			Match character '%'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mMOD
	
	*** Lexer Rule: mEQUAL
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '=' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '=' }
			is matched.
			Match string literal "=="
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mEQUAL
	
	*** Lexer Rule: mNOT_EQ
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '!' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '!' }
			is matched.
			Match string literal "!="
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mNOT_EQ
	
	*** Lexer Rule: mNOT_EQ_CASE
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '!' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '!' }
			is matched.
			Match string literal "!=="
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mNOT_EQ_CASE
	
	*** Lexer Rule: mEQ_CASE
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '=' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '=' }
			is matched.
			Match string literal "==="
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mEQ_CASE
	
	*** Lexer Rule: mLAND
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '&' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '&' }
			is matched.
			Match string literal "&&"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mLAND
	
	*** Lexer Rule: mLOR
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '|' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '|' }
			is matched.
			Match string literal "||"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mLOR
	
	*** Lexer Rule: mLT_
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '<' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '<' }
			is matched.
			Match character '<'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mLT_
	
	*** Lexer Rule: mLE
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '<' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '<' }
			is matched.
			Match string literal "<="
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mLE
	
	*** Lexer Rule: mGT
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '>' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '>' }
			is matched.
			Match character '>'
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mGT
	
	*** Lexer Rule: mGE
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '>' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '>' }
			is matched.
			Match string literal ">="
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mGE
	
	*** Lexer Rule: mSR
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '>' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '>' }
			is matched.
			Match string literal ">>"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mSR
	
	*** Lexer Rule: mSL
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '<' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '<' }
			is matched.
			Match string literal "<<"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mSL
	
	*** Lexer Rule: mSR3
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '>' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '>' }
			is matched.
			Match string literal ">>>"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mSR3
	
	*** Lexer Rule: mSL3
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '<' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '<' }
			is matched.
			Match string literal "<<<"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mSL3
	
	*** Lexer Rule: mTRIGGER
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '-' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '-' }
			is matched.
			Match string literal "->"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mTRIGGER
	
	*** Lexer Rule: mPPATH
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '=' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '=' }
			is matched.
			Match string literal "=>"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mPPATH
	
	*** Lexer Rule: mFPATH
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '*' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '*' }
			is matched.
			Match string literal "*>"
			
			OTHERWISE, a NoViableAlt exception will be thrown
			
		End of alternative block.
	*** End Lexer Rule: mFPATH
	
	*** Lexer Rule: mTIC_DIRECTIVE
		Access: public
		Return value: lexical rule returns an implicit token type
		Start of an alternative block.
			The lookahead set for this block is:
				{ '`' }
			This block has a single alternative
			
			Alternate(1) will be taken IF:
			The lookahead set: 
				{ '`' }
			is matched.
			Match character '`'
			Rule Reference: mIDENT
			Start of alternative block.
				Start of an alternative block.
					The lookahead set for this block is:
						{ 
							'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
							'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
							'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
							'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
							'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
							'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
							'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
							'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
							'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
							'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
							'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
							'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
							'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
							'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
							'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
							'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
							'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
							'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
							'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
							'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
							'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
							'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
							'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
							'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
							'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
							'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
							'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
						 }
					This block has a single alternative
					
					Alternate(1) will be taken IF:
					The lookahead set: 
						{ 
							'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
							'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
							'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
							'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
							'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
							'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
							'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
							'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
							'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
							'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
							'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
							'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
							'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
							'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
							'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
							'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
							'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
							'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
							'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
							'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
							'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
							'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
							'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
							'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
							'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
							'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
							'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
						 }
					is matched, AND the semantic predicate:
						id.getText().equals("line")
						is true.
						Rule Reference: mTIC_LINE
						
						OTHERWISE, a NoViableAlt exception will be thrown
						
					End of alternative block.
				ACTION: $setType(Token.SKIP);
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mTIC_DIRECTIVE
		
		*** Lexer Rule: mIDENT
			Access: public
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ 
						'A', 'B', 'C', 'D', 'E', 
						'F', 'G', 'H', 'I', 'J', 'K', 
						'L', 'M', 'N', 'O', 'P', 'Q', 
						'R', 'S', 'T', 'U', 'V', 'W', 
						'X', 'Y', 'Z', '_', 'a', 'b', 
						'c', 'd', 'e', 'f', 'g', 'h', 
						'i', 'j', 'k', 'l', 'm', 'n', 
						'o', 'p', 'q', 'r', 's', 't', 
						'u', 'v', 'w', 'x', 'y', 'z'
					 }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ 
						'A', 'B', 'C', 'D', 'E', 
						'F', 'G', 'H', 'I', 'J', 'K', 
						'L', 'M', 'N', 'O', 'P', 'Q', 
						'R', 'S', 'T', 'U', 'V', 'W', 
						'X', 'Y', 'Z', '_', 'a', 'b', 
						'c', 'd', 'e', 'f', 'g', 'h', 
						'i', 'j', 'k', 'l', 'm', 'n', 
						'o', 'p', 'q', 'r', 's', 't', 
						'u', 'v', 'w', 'x', 'y', 'z'
					 }
				is matched.
				Start of alternative block.
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'A', 'B', 'C', 'D', 'E', 
								'F', 'G', 'H', 'I', 'J', 'K', 
								'L', 'M', 'N', 'O', 'P', 'Q', 
								'R', 'S', 'T', 'U', 'V', 'W', 
								'X', 'Y', 'Z', '_', 'a', 'b', 
								'c', 'd', 'e', 'f', 'g', 'h', 
								'i', 'j', 'k', 'l', 'm', 'n', 
								'o', 'p', 'q', 'r', 's', 't', 
								'u', 'v', 'w', 'x', 'y', 'z'
							 }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ 
									'a', 'b', 'c', 'd', 'e', 
									'f', 'g', 'h', 'i', 'j', 'k', 
									'l', 'm', 'n', 'o', 'p', 'q', 
									'r', 's', 't', 'u', 'v', 'w', 
									'x', 'y', 'z'
								 }
							is matched.
							Match character range: 'a'..'z'
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								{ 
									'A', 'B', 'C', 'D', 'E', 
									'F', 'G', 'H', 'I', 'J', 'K', 
									'L', 'M', 'N', 'O', 'P', 'Q', 
									'R', 'S', 'T', 'U', 'V', 'W', 
									'X', 'Y', 'Z'
								 }
							is matched.
							Match character range: 'A'..'Z'
							
							Otherwise, Alternate(3) will be taken IF:
							The lookahead set: 
								{ '_' }
							is matched.
							Match character '_'
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				Start ZERO-OR-MORE (...)+ block:
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'$', '0', '1', '2', '3', 
								'4', '5', '6', '7', '8', '9', 
								'A', 'B', 'C', 'D', 'E', 'F', 
								'G', 'H', 'I', 'J', 'K', 'L', 
								'M', 'N', 'O', 'P', 'Q', 'R', 
								'S', 'T', 'U', 'V', 'W', 'X', 
								'Y', 'Z', '_', 'a', 'b', 'c', 
								'd', 'e', 'f', 'g', 'h', 'i', 
								'j', 'k', 'l', 'm', 'n', 'o', 
								'p', 'q', 'r', 's', 't', 'u', 
								'v', 'w', 'x', 'y', 'z'
							 }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ 
									'a', 'b', 'c', 'd', 'e', 
									'f', 'g', 'h', 'i', 'j', 'k', 
									'l', 'm', 'n', 'o', 'p', 'q', 
									'r', 's', 't', 'u', 'v', 'w', 
									'x', 'y', 'z'
								 }
							is matched.
							Match character range: 'a'..'z'
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								{ 
									'A', 'B', 'C', 'D', 'E', 
									'F', 'G', 'H', 'I', 'J', 'K', 
									'L', 'M', 'N', 'O', 'P', 'Q', 
									'R', 'S', 'T', 'U', 'V', 'W', 
									'X', 'Y', 'Z'
								 }
							is matched.
							Match character range: 'A'..'Z'
							
							Otherwise, Alternate(3) will be taken IF:
							The lookahead set: 
								{ '_' }
							is matched.
							Match character '_'
							
							Otherwise, Alternate(4) will be taken IF:
							The lookahead set: 
								{ '$' }
							is matched.
							Match character '$'
							
							Otherwise, Alternate(5) will be taken IF:
							The lookahead set: 
								{ 
									'0', '1', '2', '3', '4', 
									'5', '6', '7', '8', '9'
								 }
							is matched.
							Match character range: '0'..'9'
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				End ZERO-OR-MORE block.
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mIDENT
		
		*** Lexer Rule: mTIC_LINE
			Access: protected
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ 
						'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
						'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
						'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
						'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
						'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
						'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
						'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
						'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
						'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
						'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
						'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
						'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
						'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
						'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
						'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
						'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
						'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
						'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
						'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
						'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
						'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
						'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
						'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
						'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
						'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
						'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
						'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
					 }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ 
						'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
						'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
						'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
						'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
						'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
						'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
						'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
						'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
						'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
						'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
						'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
						'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
						'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
						'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
						'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
						'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
						'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
						'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
						'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
						'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
						'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
						'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
						'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
						'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
						'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
						'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
						'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
					 }
				is matched.
				Start ONE-OR-MORE (...)+ block:
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
								'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
								'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
								'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
								'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
								'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
								'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
								'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
								'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
								'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
								'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
								'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
								'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
								'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
								'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
								'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
								'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
								'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
								'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
								'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
								'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
								'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
								'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
								'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
								'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
								'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
							 }
						This block has a single alternative
						
						Alternate(1) will be taken IF:
						The lookahead set: 
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
								'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
								'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
								'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
								'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
								'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
								'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
								'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
								'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
								'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
								'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
								'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
								'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
								'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
								'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
								'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
								'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
								'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
								'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
								'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
								'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
								'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
								'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
								'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
								'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
								'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
							 }
						is matched.
						Rule Reference: mWS2
						
						OTHERWISE, a NoViableAlt exception will be thrown
						
					End of alternative block.
				End ONE-OR-MORE block.
				Rule Reference: mUNSIZED_NUMBER
				Start ONE-OR-MORE (...)+ block:
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
								'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
								'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
								'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
								'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
								'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
								'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
								'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
								'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
								'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
								'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
								'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
								'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
								'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
								'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
								'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
								'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
								'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
								'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
								'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
								'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
								'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
								'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
								'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
								'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
								'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
							 }
						This block has a single alternative
						
						Alternate(1) will be taken IF:
						The lookahead set: 
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
								'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
								'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
								'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
								'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
								'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
								'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
								'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
								'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
								'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
								'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
								'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
								'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
								'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
								'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
								'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
								'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
								'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
								'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
								'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
								'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
								'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
								'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
								'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
								'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
								'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
							 }
						is matched.
						Rule Reference: mWS2
						
						OTHERWISE, a NoViableAlt exception will be thrown
						
					End of alternative block.
				End ONE-OR-MORE block.
				Rule Reference: mSTRING
				Start ONE-OR-MORE (...)+ block:
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
								'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
								'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
								'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
								'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
								'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
								'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
								'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
								'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
								'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
								'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
								'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
								'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
								'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
								'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
								'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
								'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
								'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
								'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
								'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
								'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
								'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
								'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
								'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
								'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
								'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
							 }
						This block has a single alternative
						
						Alternate(1) will be taken IF:
						The lookahead set: 
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
								'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
								'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
								'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
								'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
								'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
								'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
								'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
								'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
								'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
								'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
								'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
								'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
								'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
								'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
								'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
								'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
								'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
								'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
								'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
								'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
								'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
								'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
								'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
								'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
								'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
							 }
						is matched.
						Rule Reference: mWS2
						
						OTHERWISE, a NoViableAlt exception will be thrown
						
					End of alternative block.
				End ONE-OR-MORE block.
				Rule Reference: mUNSIZED_NUMBER
				Start ZERO-OR-MORE (...)+ block:
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
								'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
								'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
								'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
								'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
								'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
								'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
								'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
								'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
								'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
								'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
								'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
								'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
								'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
								'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
								'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
								'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
								'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
								'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
								'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
								'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
								'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
								'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
								'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
								'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
								'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
							 }
						This block has a single alternative
						
						Alternate(1) will be taken IF:
						The lookahead set: 
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
								'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
								'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
								'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
								'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
								'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
								'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
								'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
								'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
								'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
								'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
								'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
								'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
								'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
								'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
								'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
								'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
								'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
								'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
								'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
								'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
								'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
								'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
								'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
								'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
								'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
							 }
						is matched.
						Rule Reference: mWS2
						
						OTHERWISE, a NoViableAlt exception will be thrown
						
					End of alternative block.
				End ZERO-OR-MORE block.
				Match character '\n'
				ACTION: 
							setFilename(fname.getText().replace("\"",""));
							setLine(Integer.parseInt(lnum.getText()));
							$setType(Token.SKIP);
						
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mTIC_LINE
		
		*** Lexer Rule: mWS2
			Access: protected
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ 
						'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
						'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
						'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
						'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
						'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
						'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
						'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
						'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
						'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
						'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
						'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
						'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
						'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
						'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
						'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
						'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
						'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
						'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
						'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
						'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
						'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
						'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
						'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
						'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
						'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
						'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
						'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
					 }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ 
						'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
						'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
						'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
						'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
						'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
						'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
						'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
						'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
						'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
						'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
						'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
						'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
						'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
						'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
						'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
						'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
						'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
						'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
						'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
						'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
						'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
						'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
						'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
						'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
						'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
						'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
						'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
					 }
				is matched.
				Start of alternative block.
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
								'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
								'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
								'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
								'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
								'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
								'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
								'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
								'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
								'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
								'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
								'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
								'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
								'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
								'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
								'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
								'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
								'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
								'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
								'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
								'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
								'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
								'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
								'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
								'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
								'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
							 }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ 
									'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
									'\u0005', '\u0006', '\u0007', '\u0008', '\u000b', '\u000c', 
									'\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', 
									'\u0014', '\u0015', '\u0016', '\u0017', '\u0018', '\u0019', 
									'\u001a', '\u001b', '\u001c', '\u001d', '\u001e', '\u001f', 
									'\u007f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', 
									'\u0085', '\u0086', '\u0087', '\u0088', '\u0089', '\u008a', 
									'\u008b', '\u008c', '\u008d', '\u008e', '\u008f', '\u0090', 
									'\u0091', '\u0092', '\u0093', '\u0094', '\u0095', '\u0096', 
									'\u0097', '\u0098', '\u0099', '\u009a', '\u009b', '\u009c', 
									'\u009d', '\u009e', '\u009f', '\u00a0', '\u00a1', '\u00a2', 
									'\u00a3', '\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', 
									'\u00a9', '\u00aa', '\u00ab', '\u00ac', '\u00ad', '\u00ae', 
									'\u00af', '\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', 
									'\u00b5', '\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', 
									'\u00bb', '\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', 
									'\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', 
									'\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', 
									'\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', 
									'\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', 
									'\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', 
									'\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', 
									'\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', 
									'\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', 
									'\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', 
									'\u00f7', '\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', 
									'\u00fd', '\u00fe', '\u00ff'
								 }
							is matched.
							Rule Reference: mCNTRL
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								{ ' ' }
							is matched.
							Match character ' '
							
							Otherwise, Alternate(3) will be taken IF:
							The lookahead set: 
								{ '\r' }
							is matched.
							Match character '\r'
							
							Otherwise, Alternate(4) will be taken IF:
							The lookahead set: 
								{ '\t' }
							is matched.
							Match character '\t'
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mWS2
		
		*** Lexer Rule: mUNSIZED_NUMBER
			Access: protected
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ 
						'0', '1', '2', '3', '4', 
						'5', '6', '7', '8', '9'
					 }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ 
						'0', '1', '2', '3', '4', 
						'5', '6', '7', '8', '9'
					 }
				is matched.
				Rule Reference: mDIGIT
				Start ZERO-OR-MORE (...)+ block:
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'0', '1', '2', '3', '4', 
								'5', '6', '7', '8', '9', '_'
							 }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ 
									'0', '1', '2', '3', '4', 
									'5', '6', '7', '8', '9'
								 }
							is matched.
							Rule Reference: mDIGIT
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								{ '_' }
							is matched.
							Match character '_'
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				End ZERO-OR-MORE block.
				Start of alternative block.
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
								'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
								'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
								'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
								'\u001d', '\u001e', '\u001f', ' ', '.', 'E', 
								'e', '\u007f', '\u0080', '\u0081', '\u0082', '\u0083', 
								'\u0084', '\u0085', '\u0086', '\u0087', '\u0088', '\u0089', 
								'\u008a', '\u008b', '\u008c', '\u008d', '\u008e', '\u008f', 
								'\u0090', '\u0091', '\u0092', '\u0093', '\u0094', '\u0095', 
								'\u0096', '\u0097', '\u0098', '\u0099', '\u009a', '\u009b', 
								'\u009c', '\u009d', '\u009e', '\u009f', '\u00a0', '\u00a1', 
								'\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', '\u00a7', 
								'\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', '\u00ad', 
								'\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', '\u00b3', 
								'\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', '\u00b9', 
								'\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', '\u00bf', 
								'\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', 
								'\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', 
								'\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', 
								'\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d7', 
								'\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', 
								'\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', 
								'\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', 
								'\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', 
								'\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', 
								'\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', '\u00fb', 
								'\u00fc', '\u00fd', '\u00fe', '\u00ff'
							 }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ '.' }
							is matched.
							Match character '.'
							Start ZERO-OR-MORE (...)+ block:
								Start of an alternative block.
									The lookahead set for this block is:
										{ 
											'0', '1', '2', '3', '4', 
											'5', '6', '7', '8', '9', '_'
										 }
									This block has multiple alternatives:
										
										Alternate(1) will be taken IF:
										The lookahead set: 
											{ 
												'0', '1', '2', '3', '4', 
												'5', '6', '7', '8', '9'
											 }
										is matched.
										Rule Reference: mDIGIT
										
										Otherwise, Alternate(2) will be taken IF:
										The lookahead set: 
											{ '_' }
										is matched.
										Match character '_'
										
										OTHERWISE, a NoViableAlt exception will be thrown
										
									End of alternatives
								End of alternative block.
							End ZERO-OR-MORE block.
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								MATCHES ALL
							is matched.
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				Start of alternative block.
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
								'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
								'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
								'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
								'\u001d', '\u001e', '\u001f', ' ', 'E', 'e', 
								'\u007f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', 
								'\u0085', '\u0086', '\u0087', '\u0088', '\u0089', '\u008a', 
								'\u008b', '\u008c', '\u008d', '\u008e', '\u008f', '\u0090', 
								'\u0091', '\u0092', '\u0093', '\u0094', '\u0095', '\u0096', 
								'\u0097', '\u0098', '\u0099', '\u009a', '\u009b', '\u009c', 
								'\u009d', '\u009e', '\u009f', '\u00a0', '\u00a1', '\u00a2', 
								'\u00a3', '\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', 
								'\u00a9', '\u00aa', '\u00ab', '\u00ac', '\u00ad', '\u00ae', 
								'\u00af', '\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', 
								'\u00b5', '\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', 
								'\u00bb', '\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', 
								'\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', 
								'\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', 
								'\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', 
								'\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', 
								'\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', 
								'\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', 
								'\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', 
								'\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', 
								'\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', 
								'\u00f7', '\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', 
								'\u00fd', '\u00fe', '\u00ff'
							 }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ 'E', 'e' }
							is matched.
							Rule Reference: mEXPONENT
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								MATCHES ALL
							is matched.
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mUNSIZED_NUMBER
		
		*** Lexer Rule: mSTRING
			Access: public
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ '"' }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ '"' }
				is matched.
				Match character '"'
				Start ZERO-OR-MORE (...)+ block:
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
								'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
								'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
								'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
								'\u001e', '\u001f', ' ', '!', '#', '$', 
								'%', '&', '\'', '(', ')', '*', 
								'+', ',', '-', '.', '/', '0', 
								'1', '2', '3', '4', '5', '6', 
								'7', '8', '9', ':', ';', '<', 
								'=', '>', '?', '@', 'A', 'B', 
								'C', 'D', 'E', 'F', 'G', 'H', 
								'I', 'J', 'K', 'L', 'M', 'N', 
								'O', 'P', 'Q', 'R', 'S', 'T', 
								'U', 'V', 'W', 'X', 'Y', 'Z', 
								'[', '\\', ']', '^', '_', '`', 
								'a', 'b', 'c', 'd', 'e', 'f', 
								'g', 'h', 'i', 'j', 'k', 'l', 
								'm', 'n', 'o', 'p', 'q', 'r', 
								's', 't', 'u', 'v', 'w', 'x', 
								'y', 'z', '{', '|', '}', '~', 
								'\u007f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', 
								'\u0085', '\u0086', '\u0087', '\u0088', '\u0089', '\u008a', 
								'\u008b', '\u008c', '\u008d', '\u008e', '\u008f', '\u0090', 
								'\u0091', '\u0092', '\u0093', '\u0094', '\u0095', '\u0096', 
								'\u0097', '\u0098', '\u0099', '\u009a', '\u009b', '\u009c', 
								'\u009d', '\u009e', '\u009f', '\u00a0', '\u00a1', '\u00a2', 
								'\u00a3', '\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', 
								'\u00a9', '\u00aa', '\u00ab', '\u00ac', '\u00ad', '\u00ae', 
								'\u00af', '\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', 
								'\u00b5', '\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', 
								'\u00bb', '\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', 
								'\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', 
								'\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', 
								'\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', 
								'\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', 
								'\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', 
								'\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', 
								'\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', 
								'\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', 
								'\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', 
								'\u00f7', '\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', 
								'\u00fd', '\u00fe', '\u00ff'
							 }
						This block has a single alternative
						
						Alternate(1) will be taken IF:
						The lookahead set: 
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
								'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
								'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
								'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
								'\u001e', '\u001f', ' ', '!', '#', '$', 
								'%', '&', '\'', '(', ')', '*', 
								'+', ',', '-', '.', '/', '0', 
								'1', '2', '3', '4', '5', '6', 
								'7', '8', '9', ':', ';', '<', 
								'=', '>', '?', '@', 'A', 'B', 
								'C', 'D', 'E', 'F', 'G', 'H', 
								'I', 'J', 'K', 'L', 'M', 'N', 
								'O', 'P', 'Q', 'R', 'S', 'T', 
								'U', 'V', 'W', 'X', 'Y', 'Z', 
								'[', '\\', ']', '^', '_', '`', 
								'a', 'b', 'c', 'd', 'e', 'f', 
								'g', 'h', 'i', 'j', 'k', 'l', 
								'm', 'n', 'o', 'p', 'q', 'r', 
								's', 't', 'u', 'v', 'w', 'x', 
								'y', 'z', '{', '|', '}', '~', 
								'\u007f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', 
								'\u0085', '\u0086', '\u0087', '\u0088', '\u0089', '\u008a', 
								'\u008b', '\u008c', '\u008d', '\u008e', '\u008f', '\u0090', 
								'\u0091', '\u0092', '\u0093', '\u0094', '\u0095', '\u0096', 
								'\u0097', '\u0098', '\u0099', '\u009a', '\u009b', '\u009c', 
								'\u009d', '\u009e', '\u009f', '\u00a0', '\u00a1', '\u00a2', 
								'\u00a3', '\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', 
								'\u00a9', '\u00aa', '\u00ab', '\u00ac', '\u00ad', '\u00ae', 
								'\u00af', '\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', 
								'\u00b5', '\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', 
								'\u00bb', '\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', 
								'\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', 
								'\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', 
								'\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', 
								'\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', 
								'\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', 
								'\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', 
								'\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', 
								'\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', 
								'\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', 
								'\u00f7', '\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', 
								'\u00fd', '\u00fe', '\u00ff'
							 }
						is matched.
						Start of alternative block.
							Start of an alternative block.
								The lookahead set for this block is:
									{ 
										'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
										'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
										'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
										'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
										'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
										'\u001e', '\u001f', ' ', '!', '#', '$', 
										'%', '&', '\'', '(', ')', '*', 
										'+', ',', '-', '.', '/', '0', 
										'1', '2', '3', '4', '5', '6', 
										'7', '8', '9', ':', ';', '<', 
										'=', '>', '?', '@', 'A', 'B', 
										'C', 'D', 'E', 'F', 'G', 'H', 
										'I', 'J', 'K', 'L', 'M', 'N', 
										'O', 'P', 'Q', 'R', 'S', 'T', 
										'U', 'V', 'W', 'X', 'Y', 'Z', 
										'[', '\\', ']', '^', '_', '`', 
										'a', 'b', 'c', 'd', 'e', 'f', 
										'g', 'h', 'i', 'j', 'k', 'l', 
										'm', 'n', 'o', 'p', 'q', 'r', 
										's', 't', 'u', 'v', 'w', 'x', 
										'y', 'z', '{', '|', '}', '~', 
										'\u007f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', 
										'\u0085', '\u0086', '\u0087', '\u0088', '\u0089', '\u008a', 
										'\u008b', '\u008c', '\u008d', '\u008e', '\u008f', '\u0090', 
										'\u0091', '\u0092', '\u0093', '\u0094', '\u0095', '\u0096', 
										'\u0097', '\u0098', '\u0099', '\u009a', '\u009b', '\u009c', 
										'\u009d', '\u009e', '\u009f', '\u00a0', '\u00a1', '\u00a2', 
										'\u00a3', '\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', 
										'\u00a9', '\u00aa', '\u00ab', '\u00ac', '\u00ad', '\u00ae', 
										'\u00af', '\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', 
										'\u00b5', '\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', 
										'\u00bb', '\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', 
										'\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', 
										'\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', 
										'\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', 
										'\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', 
										'\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', 
										'\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', 
										'\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', 
										'\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', 
										'\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', 
										'\u00f7', '\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', 
										'\u00fd', '\u00fe', '\u00ff'
									 }
								This block has multiple alternatives:
									
									Alternate(1) will be taken IF:
									The lookahead set: 
										{ '"' }
									is matched.
									Match character '"'
									
									Otherwise, Alternate(2) will be taken IF:
									The lookahead set: 
										{ '\n' }
									is matched.
									Match character '\n'
									
									OTHERWISE, a NoViableAlt exception will be thrown
									
								End of alternatives
							End of alternative block.
						
						OTHERWISE, a NoViableAlt exception will be thrown
						
					End of alternative block.
				End ZERO-OR-MORE block.
				Match character '"'
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mSTRING
		
		*** Lexer Rule: mESCAPED_IDENT
			Access: public
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ '\\' }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ '\\' }
				is matched.
				Match character '\\'
				Start ONE-OR-MORE (...)+ block:
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\u000b', '\u000c', 
								'\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', 
								'\u0014', '\u0015', '\u0016', '\u0017', '\u0018', '\u0019', 
								'\u001a', '\u001b', '\u001c', '\u001d', '\u001e', '\u001f', 
								'!', '"', '#', '$', '%', '&', 
								'\'', '(', ')', '*', '+', ',', 
								'-', '.', '/', '0', '1', '2', 
								'3', '4', '5', '6', '7', '8', 
								'9', ':', ';', '<', '=', '>', 
								'?', '@', 'A', 'B', 'C', 'D', 
								'E', 'F', 'G', 'H', 'I', 'J', 
								'K', 'L', 'M', 'N', 'O', 'P', 
								'Q', 'R', 'S', 'T', 'U', 'V', 
								'W', 'X', 'Y', 'Z', '[', '\\', 
								']', '^', '_', '`', 'a', 'b', 
								'c', 'd', 'e', 'f', 'g', 'h', 
								'i', 'j', 'k', 'l', 'm', 'n', 
								'o', 'p', 'q', 'r', 's', 't', 
								'u', 'v', 'w', 'x', 'y', 'z', 
								'{', '|', '}', '~', '\u007f', '\u0080', 
								'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
								'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
								'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
								'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
								'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
								'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
								'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
								'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
								'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
								'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
								'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
								'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
								'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
								'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
								'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
								'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
								'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
								'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
								'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
								'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
								'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
								'\u00ff'
							 }
						This block has a single alternative
						
						Alternate(1) will be taken IF:
						The lookahead set: 
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\u000b', '\u000c', 
								'\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', 
								'\u0014', '\u0015', '\u0016', '\u0017', '\u0018', '\u0019', 
								'\u001a', '\u001b', '\u001c', '\u001d', '\u001e', '\u001f', 
								'!', '"', '#', '$', '%', '&', 
								'\'', '(', ')', '*', '+', ',', 
								'-', '.', '/', '0', '1', '2', 
								'3', '4', '5', '6', '7', '8', 
								'9', ':', ';', '<', '=', '>', 
								'?', '@', 'A', 'B', 'C', 'D', 
								'E', 'F', 'G', 'H', 'I', 'J', 
								'K', 'L', 'M', 'N', 'O', 'P', 
								'Q', 'R', 'S', 'T', 'U', 'V', 
								'W', 'X', 'Y', 'Z', '[', '\\', 
								']', '^', '_', '`', 'a', 'b', 
								'c', 'd', 'e', 'f', 'g', 'h', 
								'i', 'j', 'k', 'l', 'm', 'n', 
								'o', 'p', 'q', 'r', 's', 't', 
								'u', 'v', 'w', 'x', 'y', 'z', 
								'{', '|', '}', '~', '\u007f', '\u0080', 
								'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
								'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
								'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
								'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
								'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
								'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
								'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
								'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
								'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
								'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
								'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
								'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
								'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
								'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
								'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
								'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
								'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
								'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
								'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
								'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
								'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
								'\u00ff'
							 }
						is matched.
						Start of alternative block.
							Start of an alternative block.
								The lookahead set for this block is:
									{ 
										'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
										'\u0005', '\u0006', '\u0007', '\u0008', '\u000b', '\u000c', 
										'\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', 
										'\u0014', '\u0015', '\u0016', '\u0017', '\u0018', '\u0019', 
										'\u001a', '\u001b', '\u001c', '\u001d', '\u001e', '\u001f', 
										'!', '"', '#', '$', '%', '&', 
										'\'', '(', ')', '*', '+', ',', 
										'-', '.', '/', '0', '1', '2', 
										'3', '4', '5', '6', '7', '8', 
										'9', ':', ';', '<', '=', '>', 
										'?', '@', 'A', 'B', 'C', 'D', 
										'E', 'F', 'G', 'H', 'I', 'J', 
										'K', 'L', 'M', 'N', 'O', 'P', 
										'Q', 'R', 'S', 'T', 'U', 'V', 
										'W', 'X', 'Y', 'Z', '[', '\\', 
										']', '^', '_', '`', 'a', 'b', 
										'c', 'd', 'e', 'f', 'g', 'h', 
										'i', 'j', 'k', 'l', 'm', 'n', 
										'o', 'p', 'q', 'r', 's', 't', 
										'u', 'v', 'w', 'x', 'y', 'z', 
										'{', '|', '}', '~', '\u007f', '\u0080', 
										'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
										'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
										'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
										'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
										'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
										'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
										'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
										'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
										'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
										'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
										'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
										'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
										'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
										'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
										'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
										'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
										'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
										'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
										'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
										'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
										'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
										'\u00ff'
									 }
								This block has multiple alternatives:
									
									Alternate(1) will be taken IF:
									The lookahead set: 
										{ ' ' }
									is matched.
									Match character ' '
									
									Otherwise, Alternate(2) will be taken IF:
									The lookahead set: 
										{ '\r' }
									is matched.
									Match character '\r'
									
									Otherwise, Alternate(3) will be taken IF:
									The lookahead set: 
										{ '\t' }
									is matched.
									Match character '\t'
									
									Otherwise, Alternate(4) will be taken IF:
									The lookahead set: 
										{ '\n' }
									is matched.
									Match character '\n'
									
									OTHERWISE, a NoViableAlt exception will be thrown
									
								End of alternatives
							End of alternative block.
						
						OTHERWISE, a NoViableAlt exception will be thrown
						
					End of alternative block.
				End ONE-OR-MORE block.
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mESCAPED_IDENT
		
		*** Lexer Rule: mSYSTEM_TASK_NAME
			Access: public
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ '$' }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ '$' }
				is matched.
				Match character '$'
				Rule Reference: mIDENT
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mSYSTEM_TASK_NAME
		
		*** Lexer Rule: mNUMBER
			Access: public
			Return value: lexical rule returns an implicit token type
			Error: This rule is non-deterministic
			Start of an alternative block.
				The lookahead set for this block is:
					k==1: {
						'\'', '0', '1', '2', '3', 
						'4', '5', '6', '7', '8', '9'
					 }
					k==2: {
						'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
						'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
						'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
						'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
						'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
						'\u001d', '\u001e', '\u001f', ' ', '\'', '.', 
						'0', '1', '2', '3', '4', '5', 
						'6', '7', '8', '9', 'B', 'D', 
						'E', 'H', 'O', '_', 'b', 'd', 
						'e', 'h', 'o', '\u007f', '\u0080', '\u0081', 
						'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
						'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
						'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
						'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
						'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
						'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
						'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
						'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
						'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
						'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
						'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
						'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
						'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
						'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
						'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
						'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
						'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
						'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
						'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
						'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
						'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
					 }
					k==3: {
						'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
						'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
						'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
						'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
						'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
						'\u001d', '\u001e', '\u001f', ' ', '\'', '+', 
						'-', '.', '0', '1', '2', '3', 
						'4', '5', '6', '7', '8', '9', 
						'?', 'A', 'B', 'C', 'D', 'E', 
						'F', 'H', 'O', 'X', 'Z', '_', 
						'a', 'b', 'c', 'd', 'e', 'f', 
						'h', 'o', 'x', 'z', '\u007f', '\u0080', 
						'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
						'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
						'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
						'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
						'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
						'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
						'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
						'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
						'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
						'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
						'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
						'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
						'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
						'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
						'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
						'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
						'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
						'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
						'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
						'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
						'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
						'\u00ff'
					 }
				This block has multiple alternatives:
					
					Alternate(1) will be taken IF:
					The lookahead set: 
						k==1: {
							'\'', '0', '1', '2', '3', 
							'4', '5', '6', '7', '8', '9'
						 }
						k==2: {
							'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
							'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
							'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
							'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
							'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
							'\u001d', '\u001e', '\u001f', ' ', '\'', '0', 
							'1', '2', '3', '4', '5', '6', 
							'7', '8', '9', 'B', 'D', 'H', 
							'O', 'b', 'd', 'h', 'o', '\u007f', 
							'\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\u0085', 
							'\u0086', '\u0087', '\u0088', '\u0089', '\u008a', '\u008b', 
							'\u008c', '\u008d', '\u008e', '\u008f', '\u0090', '\u0091', 
							'\u0092', '\u0093', '\u0094', '\u0095', '\u0096', '\u0097', 
							'\u0098', '\u0099', '\u009a', '\u009b', '\u009c', '\u009d', 
							'\u009e', '\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', 
							'\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', 
							'\u00aa', '\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', 
							'\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', 
							'\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', 
							'\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', 
							'\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', 
							'\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', 
							'\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', 
							'\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', 
							'\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', 
							'\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', 
							'\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', 
							'\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', 
							'\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', 
							'\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', 
							'\u00fe', '\u00ff'
						 }
						k==3: {
							'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
							'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
							'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
							'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
							'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
							'\u001d', '\u001e', '\u001f', ' ', '\'', '0', 
							'1', '2', '3', '4', '5', '6', 
							'7', '8', '9', '?', 'A', 'B', 
							'C', 'D', 'E', 'F', 'H', 'O', 
							'X', 'Z', 'a', 'b', 'c', 'd', 
							'e', 'f', 'h', 'o', 'x', 'z', 
							'\u007f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', 
							'\u0085', '\u0086', '\u0087', '\u0088', '\u0089', '\u008a', 
							'\u008b', '\u008c', '\u008d', '\u008e', '\u008f', '\u0090', 
							'\u0091', '\u0092', '\u0093', '\u0094', '\u0095', '\u0096', 
							'\u0097', '\u0098', '\u0099', '\u009a', '\u009b', '\u009c', 
							'\u009d', '\u009e', '\u009f', '\u00a0', '\u00a1', '\u00a2', 
							'\u00a3', '\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', 
							'\u00a9', '\u00aa', '\u00ab', '\u00ac', '\u00ad', '\u00ae', 
							'\u00af', '\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', 
							'\u00b5', '\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', 
							'\u00bb', '\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', 
							'\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', 
							'\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', 
							'\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', 
							'\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', 
							'\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', 
							'\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', 
							'\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', 
							'\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', 
							'\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', 
							'\u00f7', '\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', 
							'\u00fd', '\u00fe', '\u00ff'
						 }
					is matched, AND the syntactic predicate:
						Start of alternative block.
							Start of an alternative block.
								The lookahead set for this block is:
									{ 
										'\'', '0', '1', '2', '3', 
										'4', '5', '6', '7', '8', '9'
									 }
								This block has a single alternative
								
								Alternate(1) will be taken IF:
								The lookahead set: 
									{ 
										'\'', '0', '1', '2', '3', 
										'4', '5', '6', '7', '8', '9'
									 }
								is matched.
								Start of alternative block.
									Start of an alternative block.
										The lookahead set for this block is:
											{ 
												'\'', '0', '1', '2', '3', 
												'4', '5', '6', '7', '8', '9'
											 }
										This block has multiple alternatives:
											
											Alternate(1) will be taken IF:
											The lookahead set: 
												{ 
													'0', '1', '2', '3', '4', 
													'5', '6', '7', '8', '9'
												 }
											is matched.
											Rule Reference: mSIZE
											Start ZERO-OR-MORE (...)+ block:
												Start of an alternative block.
													The lookahead set for this block is:
														{ 
															'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
															'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
															'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
															'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
															'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
															'\u001d', '\u001e', '\u001f', ' ', '\u007f', '\u0080', 
															'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
															'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
															'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
															'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
															'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
															'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
															'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
															'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
															'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
															'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
															'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
															'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
															'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
															'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
															'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
															'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
															'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
															'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
															'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
															'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
															'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
															'\u00ff'
														 }
													This block has a single alternative
													
													Alternate(1) will be taken IF:
													The lookahead set: 
														{ 
															'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
															'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
															'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
															'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
															'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
															'\u001d', '\u001e', '\u001f', ' ', '\u007f', '\u0080', 
															'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
															'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
															'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
															'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
															'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
															'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
															'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
															'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
															'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
															'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
															'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
															'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
															'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
															'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
															'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
															'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
															'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
															'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
															'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
															'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
															'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
															'\u00ff'
														 }
													is matched.
													Rule Reference: mWS
													
													OTHERWISE, a NoViableAlt exception will be thrown
													
												End of alternative block.
											End ZERO-OR-MORE block.
											
											Otherwise, Alternate(2) will be taken IF:
											The lookahead set: 
												{ '\'' }
											is matched.
											
											OTHERWISE, a NoViableAlt exception will be thrown
											
										End of alternatives
									End of alternative block.
								Rule Reference: mBASE
								Start ZERO-OR-MORE (...)+ block:
									Start of an alternative block.
										The lookahead set for this block is:
											{ 
												'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
												'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
												'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
												'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
												'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
												'\u001d', '\u001e', '\u001f', ' ', '\u007f', '\u0080', 
												'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
												'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
												'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
												'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
												'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
												'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
												'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
												'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
												'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
												'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
												'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
												'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
												'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
												'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
												'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
												'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
												'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
												'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
												'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
												'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
												'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
												'\u00ff'
											 }
										This block has a single alternative
										
										Alternate(1) will be taken IF:
										The lookahead set: 
											{ 
												'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
												'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
												'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
												'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
												'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
												'\u001d', '\u001e', '\u001f', ' ', '\u007f', '\u0080', 
												'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
												'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
												'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
												'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
												'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
												'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
												'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
												'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
												'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
												'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
												'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
												'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
												'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
												'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
												'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
												'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
												'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
												'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
												'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
												'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
												'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
												'\u00ff'
											 }
										is matched.
										Rule Reference: mWS
										
										OTHERWISE, a NoViableAlt exception will be thrown
										
									End of alternative block.
								End ZERO-OR-MORE block.
								Rule Reference: mSIZED_DIGIT
								
								OTHERWISE, a NoViableAlt exception will be thrown
								
							End of alternative block.
					is matched.
					Rule Reference: mSIZED_NUMBER
					
					Otherwise, Alternate(2) will be taken IF:
					The lookahead set: 
						k==1: {
							'0', '1', '2', '3', '4', 
							'5', '6', '7', '8', '9'
						 }
						k==2: {
							'.', '0', '1', '2', '3', 
							'4', '5', '6', '7', '8', '9', 
							'E', '_', 'e'
						 }
						k==3: {
							'+', '-', '.', '0', '1', 
							'2', '3', '4', '5', '6', '7', 
							'8', '9', 'E', '_', 'e'
						 }
					is matched.
					Rule Reference: mUNSIZED_NUMBER
					
					OTHERWISE, a NoViableAlt exception will be thrown
					
				End of alternatives
			End of alternative block.
		*** End Lexer Rule: mNUMBER
		
		*** Lexer Rule: mSIZE
			Access: protected
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ 
						'0', '1', '2', '3', '4', 
						'5', '6', '7', '8', '9'
					 }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ 
						'0', '1', '2', '3', '4', 
						'5', '6', '7', '8', '9'
					 }
				is matched.
				Start ONE-OR-MORE (...)+ block:
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'0', '1', '2', '3', '4', 
								'5', '6', '7', '8', '9'
							 }
						This block has a single alternative
						
						Alternate(1) will be taken IF:
						The lookahead set: 
							{ 
								'0', '1', '2', '3', '4', 
								'5', '6', '7', '8', '9'
							 }
						is matched.
						Rule Reference: mDIGIT
						
						OTHERWISE, a NoViableAlt exception will be thrown
						
					End of alternative block.
				End ONE-OR-MORE block.
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mSIZE
		
		*** Lexer Rule: mWS
			Access: public
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ 
						'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
						'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
						'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
						'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
						'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
						'\u001d', '\u001e', '\u001f', ' ', '\u007f', '\u0080', 
						'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
						'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
						'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
						'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
						'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
						'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
						'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
						'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
						'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
						'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
						'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
						'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
						'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
						'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
						'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
						'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
						'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
						'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
						'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
						'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
						'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
						'\u00ff'
					 }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ 
						'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
						'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
						'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
						'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
						'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
						'\u001d', '\u001e', '\u001f', ' ', '\u007f', '\u0080', 
						'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
						'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
						'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
						'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
						'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
						'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
						'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
						'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
						'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
						'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
						'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
						'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
						'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
						'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
						'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
						'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
						'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
						'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
						'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
						'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
						'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
						'\u00ff'
					 }
				is matched.
				Start of alternative block.
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
								'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
								'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
								'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
								'\u001d', '\u001e', '\u001f', ' ', '\u007f', '\u0080', 
								'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
								'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
								'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
								'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
								'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
								'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
								'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
								'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
								'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
								'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
								'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
								'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
								'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
								'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
								'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
								'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
								'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
								'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
								'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
								'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
								'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
								'\u00ff'
							 }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ 
									'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
									'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
									'\u000c', '\r', '\u000e', '\u000f', '\u0010', '\u0011', 
									'\u0012', '\u0013', '\u0014', '\u0015', '\u0016', '\u0017', 
									'\u0018', '\u0019', '\u001a', '\u001b', '\u001c', '\u001d', 
									'\u001e', '\u001f', ' ', '\u007f', '\u0080', '\u0081', 
									'\u0082', '\u0083', '\u0084', '\u0085', '\u0086', '\u0087', 
									'\u0088', '\u0089', '\u008a', '\u008b', '\u008c', '\u008d', 
									'\u008e', '\u008f', '\u0090', '\u0091', '\u0092', '\u0093', 
									'\u0094', '\u0095', '\u0096', '\u0097', '\u0098', '\u0099', 
									'\u009a', '\u009b', '\u009c', '\u009d', '\u009e', '\u009f', 
									'\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', 
									'\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', 
									'\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', 
									'\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', 
									'\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', 
									'\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', 
									'\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', 
									'\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', 
									'\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', 
									'\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', 
									'\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', 
									'\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', 
									'\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', 
									'\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', 
									'\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', 
									'\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
								 }
							is matched.
							Rule Reference: mWS2
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								{ '\n' }
							is matched.
							Match character '\n'
							ACTION: newline();
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				ACTION: $setType(Token.SKIP);
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mWS
		
		*** Lexer Rule: mBASE
			Access: protected
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ '\'' }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ '\'' }
				is matched.
				Match character '\''
				Start of alternative block.
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'B', 'D', 'H', 'O', 'b', 
								'd', 'h', 'o'
							 }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ 'd' }
							is matched.
							Match character 'd'
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								{ 'D' }
							is matched.
							Match character 'D'
							
							Otherwise, Alternate(3) will be taken IF:
							The lookahead set: 
								{ 'h' }
							is matched.
							Match character 'h'
							
							Otherwise, Alternate(4) will be taken IF:
							The lookahead set: 
								{ 'H' }
							is matched.
							Match character 'H'
							
							Otherwise, Alternate(5) will be taken IF:
							The lookahead set: 
								{ 'o' }
							is matched.
							Match character 'o'
							
							Otherwise, Alternate(6) will be taken IF:
							The lookahead set: 
								{ 'O' }
							is matched.
							Match character 'O'
							
							Otherwise, Alternate(7) will be taken IF:
							The lookahead set: 
								{ 'b' }
							is matched.
							Match character 'b'
							
							Otherwise, Alternate(8) will be taken IF:
							The lookahead set: 
								{ 'B' }
							is matched.
							Match character 'B'
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mBASE
		
		*** Lexer Rule: mSIZED_DIGIT
			Access: protected
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ 
						'0', '1', '2', '3', '4', 
						'5', '6', '7', '8', '9', '?', 
						'A', 'B', 'C', 'D', 'E', 'F', 
						'X', 'Z', 'a', 'b', 'c', 'd', 
						'e', 'f', 'x', 'z'
					 }
				This block has multiple alternatives:
					
					Alternate(1) will be taken IF:
					The lookahead set: 
						{ 
							'0', '1', '2', '3', '4', 
							'5', '6', '7', '8', '9'
						 }
					is matched.
					Rule Reference: mDIGIT
					
					Otherwise, Alternate(2) will be taken IF:
					The lookahead set: 
						{ 
							'A', 'B', 'C', 'D', 'E', 
							'F', 'a', 'b', 'c', 'd', 'e', 
							'f'
						 }
					is matched.
					Rule Reference: mHEXDIGIT
					
					Otherwise, Alternate(3) will be taken IF:
					The lookahead set: 
						{ 'x' }
					is matched.
					Match character 'x'
					
					Otherwise, Alternate(4) will be taken IF:
					The lookahead set: 
						{ 'X' }
					is matched.
					Match character 'X'
					
					Otherwise, Alternate(5) will be taken IF:
					The lookahead set: 
						{ 'z' }
					is matched.
					Match character 'z'
					
					Otherwise, Alternate(6) will be taken IF:
					The lookahead set: 
						{ 'Z' }
					is matched.
					Match character 'Z'
					
					Otherwise, Alternate(7) will be taken IF:
					The lookahead set: 
						{ '?' }
					is matched.
					Match character '?'
					
					OTHERWISE, a NoViableAlt exception will be thrown
					
				End of alternatives
			End of alternative block.
		*** End Lexer Rule: mSIZED_DIGIT
		
		*** Lexer Rule: mSIZED_NUMBER
			Access: protected
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ 
						'\'', '0', '1', '2', '3', 
						'4', '5', '6', '7', '8', '9'
					 }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ 
						'\'', '0', '1', '2', '3', 
						'4', '5', '6', '7', '8', '9'
					 }
				is matched.
				Start of alternative block.
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'\'', '0', '1', '2', '3', 
								'4', '5', '6', '7', '8', '9'
							 }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ 
									'0', '1', '2', '3', '4', 
									'5', '6', '7', '8', '9'
								 }
							is matched.
							Rule Reference: mSIZE
							Start ZERO-OR-MORE (...)+ block:
								Start of an alternative block.
									The lookahead set for this block is:
										{ 
											'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
											'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
											'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
											'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
											'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
											'\u001d', '\u001e', '\u001f', ' ', '\u007f', '\u0080', 
											'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
											'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
											'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
											'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
											'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
											'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
											'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
											'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
											'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
											'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
											'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
											'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
											'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
											'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
											'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
											'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
											'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
											'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
											'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
											'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
											'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
											'\u00ff'
										 }
									This block has a single alternative
									
									Alternate(1) will be taken IF:
									The lookahead set: 
										{ 
											'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
											'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
											'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
											'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
											'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
											'\u001d', '\u001e', '\u001f', ' ', '\u007f', '\u0080', 
											'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
											'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
											'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
											'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
											'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
											'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
											'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
											'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
											'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
											'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
											'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
											'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
											'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
											'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
											'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
											'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
											'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
											'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
											'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
											'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
											'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
											'\u00ff'
										 }
									is matched.
									Rule Reference: mWS
									
									OTHERWISE, a NoViableAlt exception will be thrown
									
								End of alternative block.
							End ZERO-OR-MORE block.
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								{ '\'' }
							is matched.
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				Rule Reference: mBASE
				Start ZERO-OR-MORE (...)+ block:
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
								'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
								'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
								'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
								'\u001d', '\u001e', '\u001f', ' ', '\u007f', '\u0080', 
								'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
								'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
								'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
								'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
								'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
								'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
								'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
								'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
								'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
								'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
								'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
								'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
								'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
								'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
								'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
								'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
								'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
								'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
								'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
								'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
								'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
								'\u00ff'
							 }
						This block has a single alternative
						
						Alternate(1) will be taken IF:
						The lookahead set: 
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
								'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
								'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
								'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
								'\u001d', '\u001e', '\u001f', ' ', '\u007f', '\u0080', 
								'\u0081', '\u0082', '\u0083', '\u0084', '\u0085', '\u0086', 
								'\u0087', '\u0088', '\u0089', '\u008a', '\u008b', '\u008c', 
								'\u008d', '\u008e', '\u008f', '\u0090', '\u0091', '\u0092', 
								'\u0093', '\u0094', '\u0095', '\u0096', '\u0097', '\u0098', 
								'\u0099', '\u009a', '\u009b', '\u009c', '\u009d', '\u009e', 
								'\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', 
								'\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', 
								'\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', '\u00b0', 
								'\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', 
								'\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', 
								'\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', 
								'\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', 
								'\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', 
								'\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', 
								'\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', 
								'\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', 
								'\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', 
								'\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', 
								'\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', 
								'\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', 
								'\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', 
								'\u00ff'
							 }
						is matched.
						Rule Reference: mWS
						
						OTHERWISE, a NoViableAlt exception will be thrown
						
					End of alternative block.
				End ZERO-OR-MORE block.
				Rule Reference: mSIZED_DIGIT
				Start ZERO-OR-MORE (...)+ block:
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'0', '1', '2', '3', '4', 
								'5', '6', '7', '8', '9', '?', 
								'A', 'B', 'C', 'D', 'E', 'F', 
								'X', 'Z', '_', 'a', 'b', 'c', 
								'd', 'e', 'f', 'x', 'z'
							 }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ 
									'0', '1', '2', '3', '4', 
									'5', '6', '7', '8', '9', '?', 
									'A', 'B', 'C', 'D', 'E', 'F', 
									'X', 'Z', 'a', 'b', 'c', 'd', 
									'e', 'f', 'x', 'z'
								 }
							is matched.
							Rule Reference: mSIZED_DIGIT
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								{ '_' }
							is matched.
							Match character '_'
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				End ZERO-OR-MORE block.
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mSIZED_NUMBER
		
		*** Lexer Rule: mDIGIT
			Access: protected
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ 
						'0', '1', '2', '3', '4', 
						'5', '6', '7', '8', '9'
					 }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ 
						'0', '1', '2', '3', '4', 
						'5', '6', '7', '8', '9'
					 }
				is matched.
				Start of alternative block.
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'0', '1', '2', '3', '4', 
								'5', '6', '7', '8', '9'
							 }
						This block has a single alternative
						
						Alternate(1) will be taken IF:
						The lookahead set: 
							{ 
								'0', '1', '2', '3', '4', 
								'5', '6', '7', '8', '9'
							 }
						is matched.
						Match character range: '0'..'9'
						
						OTHERWISE, a NoViableAlt exception will be thrown
						
					End of alternative block.
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mDIGIT
		
		*** Lexer Rule: mHEXDIGIT
			Access: protected
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ 
						'A', 'B', 'C', 'D', 'E', 
						'F', 'a', 'b', 'c', 'd', 'e', 
						'f'
					 }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ 
						'A', 'B', 'C', 'D', 'E', 
						'F', 'a', 'b', 'c', 'd', 'e', 
						'f'
					 }
				is matched.
				Start of alternative block.
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'A', 'B', 'C', 'D', 'E', 
								'F', 'a', 'b', 'c', 'd', 'e', 
								'f'
							 }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ 
									'A', 'B', 'C', 'D', 'E', 
									'F'
								 }
							is matched.
							Match character range: 'A'..'F'
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								{ 
									'a', 'b', 'c', 'd', 'e', 
									'f'
								 }
							is matched.
							Match character range: 'a'..'f'
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mHEXDIGIT
		
		*** Lexer Rule: mEXPONENT
			Access: protected
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ 'E', 'e' }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ 'E', 'e' }
				is matched.
				Start of alternative block.
					Start of an alternative block.
						The lookahead set for this block is:
							{ 'E', 'e' }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ 'e' }
							is matched.
							Match character 'e'
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								{ 'E' }
							is matched.
							Match character 'E'
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				Start of alternative block.
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'+', '-', '0', '1', '2', 
								'3', '4', '5', '6', '7', '8', 
								'9'
							 }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ '+' }
							is matched.
							Match character '+'
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								{ '-' }
							is matched.
							Match character '-'
							
							Otherwise, Alternate(3) will be taken IF:
							The lookahead set: 
								{ 
									'0', '1', '2', '3', '4', 
									'5', '6', '7', '8', '9'
								 }
							is matched.
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				Start ONE-OR-MORE (...)+ block:
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'0', '1', '2', '3', '4', 
								'5', '6', '7', '8', '9'
							 }
						This block has a single alternative
						
						Alternate(1) will be taken IF:
						The lookahead set: 
							{ 
								'0', '1', '2', '3', '4', 
								'5', '6', '7', '8', '9'
							 }
						is matched.
						Match character range: '0'..'9'
						
						OTHERWISE, a NoViableAlt exception will be thrown
						
					End of alternative block.
				End ONE-OR-MORE block.
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mEXPONENT
		
		*** Lexer Rule: mCNTRL
			Access: protected
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ 
						'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
						'\u0005', '\u0006', '\u0007', '\u0008', '\u000b', '\u000c', 
						'\u000e', '\u000f', '\u0010', '\u0011', '\u0012', '\u0013', 
						'\u0014', '\u0015', '\u0016', '\u0017', '\u0018', '\u0019', 
						'\u001a', '\u001b', '\u001c', '\u001d', '\u001e', '\u001f', 
						'\u007f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', 
						'\u0085', '\u0086', '\u0087', '\u0088', '\u0089', '\u008a', 
						'\u008b', '\u008c', '\u008d', '\u008e', '\u008f', '\u0090', 
						'\u0091', '\u0092', '\u0093', '\u0094', '\u0095', '\u0096', 
						'\u0097', '\u0098', '\u0099', '\u009a', '\u009b', '\u009c', 
						'\u009d', '\u009e', '\u009f', '\u00a0', '\u00a1', '\u00a2', 
						'\u00a3', '\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', 
						'\u00a9', '\u00aa', '\u00ab', '\u00ac', '\u00ad', '\u00ae', 
						'\u00af', '\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', 
						'\u00b5', '\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', 
						'\u00bb', '\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', 
						'\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', 
						'\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', 
						'\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', 
						'\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', 
						'\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', 
						'\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', 
						'\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', 
						'\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', 
						'\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', 
						'\u00f7', '\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', 
						'\u00fd', '\u00fe', '\u00ff'
					 }
				This block has multiple alternatives:
					
					Alternate(1) will be taken IF:
					The lookahead set: 
						{ 
							'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
							'\u0005', '\u0006', '\u0007', '\u0008'
						 }
					is matched.
					Match character range: '\u0000'..'\u0008'
					
					Otherwise, Alternate(2) will be taken IF:
					The lookahead set: 
						{ '\u000b', '\u000c' }
					is matched.
					Match character range: '\u000B'..'\u000C'
					
					Otherwise, Alternate(3) will be taken IF:
					The lookahead set: 
						{ 
							'\u000e', '\u000f', '\u0010', '\u0011', '\u0012', 
							'\u0013', '\u0014', '\u0015', '\u0016', '\u0017', '\u0018', 
							'\u0019', '\u001a', '\u001b', '\u001c', '\u001d', '\u001e', 
							'\u001f'
						 }
					is matched.
					Match character range: '\u000E'..'\u001F'
					
					Otherwise, Alternate(4) will be taken IF:
					The lookahead set: 
						{ 
							'\u007f', '\u0080', '\u0081', '\u0082', '\u0083', 
							'\u0084', '\u0085', '\u0086', '\u0087', '\u0088', '\u0089', 
							'\u008a', '\u008b', '\u008c', '\u008d', '\u008e', '\u008f', 
							'\u0090', '\u0091', '\u0092', '\u0093', '\u0094', '\u0095', 
							'\u0096', '\u0097', '\u0098', '\u0099', '\u009a', '\u009b', 
							'\u009c', '\u009d', '\u009e', '\u009f', '\u00a0', '\u00a1', 
							'\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', '\u00a7', 
							'\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', '\u00ad', 
							'\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', '\u00b3', 
							'\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', '\u00b9', 
							'\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', '\u00bf', 
							'\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', 
							'\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', 
							'\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', 
							'\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d7', 
							'\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', 
							'\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', 
							'\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', 
							'\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', 
							'\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', 
							'\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', '\u00fb', 
							'\u00fc', '\u00fd', '\u00fe', '\u00ff'
						 }
					is matched.
					Match character range: '\u007F'..'\u00FF'
					
					OTHERWISE, a NoViableAlt exception will be thrown
					
				End of alternatives
			End of alternative block.
		*** End Lexer Rule: mCNTRL
		
		*** Lexer Rule: mSL_COMMENT
			Access: public
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ '/' }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ '/' }
				is matched.
				Match string literal "//"
				Start ZERO-OR-MORE (...)+ block:
					Start of an alternative block.
						The lookahead set for this block is:
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
								'\u000c', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', 
								'\u0013', '\u0014', '\u0015', '\u0016', '\u0017', '\u0018', 
								'\u0019', '\u001a', '\u001b', '\u001c', '\u001d', '\u001e', 
								'\u001f', ' ', '!', '"', '#', '$', 
								'%', '&', '\'', '(', ')', '*', 
								'+', ',', '-', '.', '/', '0', 
								'1', '2', '3', '4', '5', '6', 
								'7', '8', '9', ':', ';', '<', 
								'=', '>', '?', '@', 'A', 'B', 
								'C', 'D', 'E', 'F', 'G', 'H', 
								'I', 'J', 'K', 'L', 'M', 'N', 
								'O', 'P', 'Q', 'R', 'S', 'T', 
								'U', 'V', 'W', 'X', 'Y', 'Z', 
								'[', '\\', ']', '^', '_', '`', 
								'a', 'b', 'c', 'd', 'e', 'f', 
								'g', 'h', 'i', 'j', 'k', 'l', 
								'm', 'n', 'o', 'p', 'q', 'r', 
								's', 't', 'u', 'v', 'w', 'x', 
								'y', 'z', '{', '|', '}', '~', 
								'\u007f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', 
								'\u0085', '\u0086', '\u0087', '\u0088', '\u0089', '\u008a', 
								'\u008b', '\u008c', '\u008d', '\u008e', '\u008f', '\u0090', 
								'\u0091', '\u0092', '\u0093', '\u0094', '\u0095', '\u0096', 
								'\u0097', '\u0098', '\u0099', '\u009a', '\u009b', '\u009c', 
								'\u009d', '\u009e', '\u009f', '\u00a0', '\u00a1', '\u00a2', 
								'\u00a3', '\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', 
								'\u00a9', '\u00aa', '\u00ab', '\u00ac', '\u00ad', '\u00ae', 
								'\u00af', '\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', 
								'\u00b5', '\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', 
								'\u00bb', '\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', 
								'\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', 
								'\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', 
								'\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', 
								'\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', 
								'\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', 
								'\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', 
								'\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', 
								'\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', 
								'\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', 
								'\u00f7', '\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', 
								'\u00fd', '\u00fe', '\u00ff'
							 }
						This block has a single alternative
						
						Alternate(1) will be taken IF:
						The lookahead set: 
							{ 
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
								'\u000c', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', 
								'\u0013', '\u0014', '\u0015', '\u0016', '\u0017', '\u0018', 
								'\u0019', '\u001a', '\u001b', '\u001c', '\u001d', '\u001e', 
								'\u001f', ' ', '!', '"', '#', '$', 
								'%', '&', '\'', '(', ')', '*', 
								'+', ',', '-', '.', '/', '0', 
								'1', '2', '3', '4', '5', '6', 
								'7', '8', '9', ':', ';', '<', 
								'=', '>', '?', '@', 'A', 'B', 
								'C', 'D', 'E', 'F', 'G', 'H', 
								'I', 'J', 'K', 'L', 'M', 'N', 
								'O', 'P', 'Q', 'R', 'S', 'T', 
								'U', 'V', 'W', 'X', 'Y', 'Z', 
								'[', '\\', ']', '^', '_', '`', 
								'a', 'b', 'c', 'd', 'e', 'f', 
								'g', 'h', 'i', 'j', 'k', 'l', 
								'm', 'n', 'o', 'p', 'q', 'r', 
								's', 't', 'u', 'v', 'w', 'x', 
								'y', 'z', '{', '|', '}', '~', 
								'\u007f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', 
								'\u0085', '\u0086', '\u0087', '\u0088', '\u0089', '\u008a', 
								'\u008b', '\u008c', '\u008d', '\u008e', '\u008f', '\u0090', 
								'\u0091', '\u0092', '\u0093', '\u0094', '\u0095', '\u0096', 
								'\u0097', '\u0098', '\u0099', '\u009a', '\u009b', '\u009c', 
								'\u009d', '\u009e', '\u009f', '\u00a0', '\u00a1', '\u00a2', 
								'\u00a3', '\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', 
								'\u00a9', '\u00aa', '\u00ab', '\u00ac', '\u00ad', '\u00ae', 
								'\u00af', '\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', 
								'\u00b5', '\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', 
								'\u00bb', '\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', 
								'\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', 
								'\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', 
								'\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', 
								'\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', 
								'\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', 
								'\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', 
								'\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', 
								'\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', 
								'\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', 
								'\u00f7', '\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', 
								'\u00fd', '\u00fe', '\u00ff'
							 }
						is matched.
						Start of alternative block.
							Start of an alternative block.
								The lookahead set for this block is:
									{ 
										'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
										'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
										'\u000c', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', 
										'\u0013', '\u0014', '\u0015', '\u0016', '\u0017', '\u0018', 
										'\u0019', '\u001a', '\u001b', '\u001c', '\u001d', '\u001e', 
										'\u001f', ' ', '!', '"', '#', '$', 
										'%', '&', '\'', '(', ')', '*', 
										'+', ',', '-', '.', '/', '0', 
										'1', '2', '3', '4', '5', '6', 
										'7', '8', '9', ':', ';', '<', 
										'=', '>', '?', '@', 'A', 'B', 
										'C', 'D', 'E', 'F', 'G', 'H', 
										'I', 'J', 'K', 'L', 'M', 'N', 
										'O', 'P', 'Q', 'R', 'S', 'T', 
										'U', 'V', 'W', 'X', 'Y', 'Z', 
										'[', '\\', ']', '^', '_', '`', 
										'a', 'b', 'c', 'd', 'e', 'f', 
										'g', 'h', 'i', 'j', 'k', 'l', 
										'm', 'n', 'o', 'p', 'q', 'r', 
										's', 't', 'u', 'v', 'w', 'x', 
										'y', 'z', '{', '|', '}', '~', 
										'\u007f', '\u0080', '\u0081', '\u0082', '\u0083', '\u0084', 
										'\u0085', '\u0086', '\u0087', '\u0088', '\u0089', '\u008a', 
										'\u008b', '\u008c', '\u008d', '\u008e', '\u008f', '\u0090', 
										'\u0091', '\u0092', '\u0093', '\u0094', '\u0095', '\u0096', 
										'\u0097', '\u0098', '\u0099', '\u009a', '\u009b', '\u009c', 
										'\u009d', '\u009e', '\u009f', '\u00a0', '\u00a1', '\u00a2', 
										'\u00a3', '\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', 
										'\u00a9', '\u00aa', '\u00ab', '\u00ac', '\u00ad', '\u00ae', 
										'\u00af', '\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', 
										'\u00b5', '\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', 
										'\u00bb', '\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', 
										'\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', 
										'\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', 
										'\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', 
										'\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', 
										'\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', 
										'\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', 
										'\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', 
										'\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', 
										'\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', 
										'\u00f7', '\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', 
										'\u00fd', '\u00fe', '\u00ff'
									 }
								This block has multiple alternatives:
									
									Alternate(1) will be taken IF:
									The lookahead set: 
										{ '\n' }
									is matched.
									Match character '\n'
									
									Otherwise, Alternate(2) will be taken IF:
									The lookahead set: 
										{ '\r' }
									is matched.
									Match character '\r'
									
									OTHERWISE, a NoViableAlt exception will be thrown
									
								End of alternatives
							End of alternative block.
						
						OTHERWISE, a NoViableAlt exception will be thrown
						
					End of alternative block.
				End ZERO-OR-MORE block.
				Start of alternative block.
					Start of an alternative block.
						The lookahead set for this block is:
							{ '\n', '\r' }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								{ '\n' }
							is matched.
							Match character '\n'
							
							Otherwise, Alternate(2) will be taken IF:
							The lookahead set: 
								{ '\r' }
							is matched.
							Match character '\r'
							Start of alternative block.
								Start of an alternative block.
									The lookahead set for this block is:
										{ '\n' }
									This block has multiple alternatives:
										
										Alternate(1) will be taken IF:
										The lookahead set: 
											{ '\n' }
										is matched.
										Match character '\n'
										
										Otherwise, Alternate(2) will be taken IF:
										The lookahead set: 
											MATCHES ALL
										is matched.
										
										OTHERWISE, a NoViableAlt exception will be thrown
										
									End of alternatives
								End of alternative block.
							
							Otherwise, Alternate(3) will be taken IF:
							The lookahead set: 
								MATCHES ALL
							is matched.
							
							OTHERWISE, a NoViableAlt exception will be thrown
							
						End of alternatives
					End of alternative block.
				ACTION: $setType(Token.SKIP); newline();
				
				OTHERWISE, a NoViableAlt exception will be thrown
				
			End of alternative block.
		*** End Lexer Rule: mSL_COMMENT
		
		*** Lexer Rule: mML_COMMENT
			Access: public
			Return value: lexical rule returns an implicit token type
			Start of an alternative block.
				The lookahead set for this block is:
					{ '/' }
				This block has a single alternative
				
				Alternate(1) will be taken IF:
				The lookahead set: 
					{ '/' }
				is matched.
				Match string literal "/*"
				Start ZERO-OR-MORE (...)+ block:
					Warning: This zero-or-more block is non-deterministic
					Start of an alternative block.
						The lookahead set for this block is:
							k==1: {
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
								'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
								'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
								'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
								'\u001d', '\u001e', '\u001f', ' ', '!', '"', 
								'#', '$', '%', '&', '\'', '(', 
								')', '*', '+', ',', '-', '.', 
								'/', '0', '1', '2', '3', '4', 
								'5', '6', '7', '8', '9', ':', 
								';', '<', '=', '>', '?', '@', 
								'A', 'B', 'C', 'D', 'E', 'F', 
								'G', 'H', 'I', 'J', 'K', 'L', 
								'M', 'N', 'O', 'P', 'Q', 'R', 
								'S', 'T', 'U', 'V', 'W', 'X', 
								'Y', 'Z', '[', '\\', ']', '^', 
								'_', '`', 'a', 'b', 'c', 'd', 
								'e', 'f', 'g', 'h', 'i', 'j', 
								'k', 'l', 'm', 'n', 'o', 'p', 
								'q', 'r', 's', 't', 'u', 'v', 
								'w', 'x', 'y', 'z', '{', '|', 
								'}', '~', '\u007f', '\u0080', '\u0081', '\u0082', 
								'\u0083', '\u0084', '\u0085', '\u0086', '\u0087', '\u0088', 
								'\u0089', '\u008a', '\u008b', '\u008c', '\u008d', '\u008e', 
								'\u008f', '\u0090', '\u0091', '\u0092', '\u0093', '\u0094', 
								'\u0095', '\u0096', '\u0097', '\u0098', '\u0099', '\u009a', 
								'\u009b', '\u009c', '\u009d', '\u009e', '\u009f', '\u00a0', 
								'\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', 
								'\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', 
								'\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', 
								'\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', 
								'\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', 
								'\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', 
								'\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', 
								'\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', 
								'\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', 
								'\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', 
								'\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', 
								'\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', 
								'\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', 
								'\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', 
								'\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', 
								'\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
							 }
							k==2: {
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
								'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
								'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
								'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
								'\u001d', '\u001e', '\u001f', ' ', '!', '"', 
								'#', '$', '%', '&', '\'', '(', 
								')', '*', '+', ',', '-', '.', 
								'/', '0', '1', '2', '3', '4', 
								'5', '6', '7', '8', '9', ':', 
								';', '<', '=', '>', '?', '@', 
								'A', 'B', 'C', 'D', 'E', 'F', 
								'G', 'H', 'I', 'J', 'K', 'L', 
								'M', 'N', 'O', 'P', 'Q', 'R', 
								'S', 'T', 'U', 'V', 'W', 'X', 
								'Y', 'Z', '[', '\\', ']', '^', 
								'_', '`', 'a', 'b', 'c', 'd', 
								'e', 'f', 'g', 'h', 'i', 'j', 
								'k', 'l', 'm', 'n', 'o', 'p', 
								'q', 'r', 's', 't', 'u', 'v', 
								'w', 'x', 'y', 'z', '{', '|', 
								'}', '~', '\u007f', '\u0080', '\u0081', '\u0082', 
								'\u0083', '\u0084', '\u0085', '\u0086', '\u0087', '\u0088', 
								'\u0089', '\u008a', '\u008b', '\u008c', '\u008d', '\u008e', 
								'\u008f', '\u0090', '\u0091', '\u0092', '\u0093', '\u0094', 
								'\u0095', '\u0096', '\u0097', '\u0098', '\u0099', '\u009a', 
								'\u009b', '\u009c', '\u009d', '\u009e', '\u009f', '\u00a0', 
								'\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', 
								'\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', 
								'\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', 
								'\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', 
								'\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', 
								'\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', 
								'\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', 
								'\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', 
								'\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', 
								'\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', 
								'\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', 
								'\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', 
								'\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', 
								'\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', 
								'\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', 
								'\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
							 }
							k==3: {
								'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
								'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
								'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
								'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
								'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
								'\u001d', '\u001e', '\u001f', ' ', '!', '"', 
								'#', '$', '%', '&', '\'', '(', 
								')', '*', '+', ',', '-', '.', 
								'/', '0', '1', '2', '3', '4', 
								'5', '6', '7', '8', '9', ':', 
								';', '<', '=', '>', '?', '@', 
								'A', 'B', 'C', 'D', 'E', 'F', 
								'G', 'H', 'I', 'J', 'K', 'L', 
								'M', 'N', 'O', 'P', 'Q', 'R', 
								'S', 'T', 'U', 'V', 'W', 'X', 
								'Y', 'Z', '[', '\\', ']', '^', 
								'_', '`', 'a', 'b', 'c', 'd', 
								'e', 'f', 'g', 'h', 'i', 'j', 
								'k', 'l', 'm', 'n', 'o', 'p', 
								'q', 'r', 's', 't', 'u', 'v', 
								'w', 'x', 'y', 'z', '{', '|', 
								'}', '~', '\u007f', '\u0080', '\u0081', '\u0082', 
								'\u0083', '\u0084', '\u0085', '\u0086', '\u0087', '\u0088', 
								'\u0089', '\u008a', '\u008b', '\u008c', '\u008d', '\u008e', 
								'\u008f', '\u0090', '\u0091', '\u0092', '\u0093', '\u0094', 
								'\u0095', '\u0096', '\u0097', '\u0098', '\u0099', '\u009a', 
								'\u009b', '\u009c', '\u009d', '\u009e', '\u009f', '\u00a0', 
								'\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', 
								'\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', 
								'\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', 
								'\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', 
								'\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', 
								'\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', 
								'\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', 
								'\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', 
								'\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', 
								'\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', 
								'\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', 
								'\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', 
								'\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', 
								'\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', 
								'\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', 
								'\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
							 }
						This block has multiple alternatives:
							
							Alternate(1) will be taken IF:
							The lookahead set: 
								k==1: {'*' }
								k==2: {
									'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
									'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
									'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
									'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
									'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
									'\u001d', '\u001e', '\u001f', ' ', '!', '"', 
									'#', '$', '%', '&', '\'', '(', 
									')', '*', '+', ',', '-', '.', 
									'/', '0', '1', '2', '3', '4', 
									'5', '6', '7', '8', '9', ':', 
									';', '<', '=', '>', '?', '@', 
									'A', 'B', 'C', 'D', 'E', 'F', 
									'G', 'H', 'I', 'J', 'K', 'L', 
									'M', 'N', 'O', 'P', 'Q', 'R', 
									'S', 'T', 'U', 'V', 'W', 'X', 
									'Y', 'Z', '[', '\\', ']', '^', 
									'_', '`', 'a', 'b', 'c', 'd', 
									'e', 'f', 'g', 'h', 'i', 'j', 
									'k', 'l', 'm', 'n', 'o', 'p', 
									'q', 'r', 's', 't', 'u', 'v', 
									'w', 'x', 'y', 'z', '{', '|', 
									'}', '~', '\u007f', '\u0080', '\u0081', '\u0082', 
									'\u0083', '\u0084', '\u0085', '\u0086', '\u0087', '\u0088', 
									'\u0089', '\u008a', '\u008b', '\u008c', '\u008d', '\u008e', 
									'\u008f', '\u0090', '\u0091', '\u0092', '\u0093', '\u0094', 
									'\u0095', '\u0096', '\u0097', '\u0098', '\u0099', '\u009a', 
									'\u009b', '\u009c', '\u009d', '\u009e', '\u009f', '\u00a0', 
									'\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', 
									'\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', 
									'\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', 
									'\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', 
									'\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', 
									'\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', 
									'\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', 
									'\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', 
									'\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', 
									'\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', 
									'\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', 
									'\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', 
									'\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', 
									'\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', 
									'\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', 
									'\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
								 }
								k==3: {
									'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
									'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
									'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
									'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
									'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
									'\u001d', '\u001e', '\u001f', ' ', '!', '"', 
									'#', '$', '%', '&', '\'', '(', 
									')', '*', '+', ',', '-', '.', 
									'/', '0', '1', '2', '3', '4', 
									'5', '6', '7', '8', '9', ':', 
									';', '<', '=', '>', '?', '@', 
									'A', 'B', 'C', 'D', 'E', 'F', 
									'G', 'H', 'I', 'J', 'K', 'L', 
									'M', 'N', 'O', 'P', 'Q', 'R', 
									'S', 'T', 'U', 'V', 'W', 'X', 
									'Y', 'Z', '[', '\\', ']', '^', 
									'_', '`', 'a', 'b', 'c', 'd', 
									'e', 'f', 'g', 'h', 'i', 'j', 
									'k', 'l', 'm', 'n', 'o', 'p', 
									'q', 'r', 's', 't', 'u', 'v', 
									'w', 'x', 'y', 'z', '{', '|', 
									'}', '~', '\u007f', '\u0080', '\u0081', '\u0082', 
									'\u0083', '\u0084', '\u0085', '\u0086', '\u0087', '\u0088', 
									'\u0089', '\u008a', '\u008b', '\u008c', '\u008d', '\u008e', 
									'\u008f', '\u0090', '\u0091', '\u0092', '\u0093', '\u0094', 
									'\u0095', '\u0096', '\u0097', '\u0098', '\u0099', '\u009a', 
									'\u009b', '\u009c', '\u009d', '\u009e', '\u009f', '\u00a0', 
									'\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', 
									'\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', 
									'\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', 
									'\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', 
									'\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', 
									'\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', 
									'\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', 
									'\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', 
									'\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', 
									'\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', 
									'\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', 
									'\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', 
									'\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', 
									'\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', 
									'\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', 
									'\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
								 }
							is matched, AND the semantic predicate:
								 LA(2)!='/' 
								is true.
								Match character '*'
								
								Otherwise, Alternate(2) will be taken IF:
								The lookahead set: 
									k==1: {'\r' }
									k==2: {'\n' }
									k==3: {
										'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
										'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
										'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
										'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
										'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
										'\u001d', '\u001e', '\u001f', ' ', '!', '"', 
										'#', '$', '%', '&', '\'', '(', 
										')', '*', '+', ',', '-', '.', 
										'/', '0', '1', '2', '3', '4', 
										'5', '6', '7', '8', '9', ':', 
										';', '<', '=', '>', '?', '@', 
										'A', 'B', 'C', 'D', 'E', 'F', 
										'G', 'H', 'I', 'J', 'K', 'L', 
										'M', 'N', 'O', 'P', 'Q', 'R', 
										'S', 'T', 'U', 'V', 'W', 'X', 
										'Y', 'Z', '[', '\\', ']', '^', 
										'_', '`', 'a', 'b', 'c', 'd', 
										'e', 'f', 'g', 'h', 'i', 'j', 
										'k', 'l', 'm', 'n', 'o', 'p', 
										'q', 'r', 's', 't', 'u', 'v', 
										'w', 'x', 'y', 'z', '{', '|', 
										'}', '~', '\u007f', '\u0080', '\u0081', '\u0082', 
										'\u0083', '\u0084', '\u0085', '\u0086', '\u0087', '\u0088', 
										'\u0089', '\u008a', '\u008b', '\u008c', '\u008d', '\u008e', 
										'\u008f', '\u0090', '\u0091', '\u0092', '\u0093', '\u0094', 
										'\u0095', '\u0096', '\u0097', '\u0098', '\u0099', '\u009a', 
										'\u009b', '\u009c', '\u009d', '\u009e', '\u009f', '\u00a0', 
										'\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', 
										'\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', 
										'\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', 
										'\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', 
										'\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', 
										'\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', 
										'\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', 
										'\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', 
										'\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', 
										'\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', 
										'\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', 
										'\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', 
										'\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', 
										'\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', 
										'\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', 
										'\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
									 }
								is matched.
								Match character '\r'
								Match character '\n'
								ACTION: newline();
								
								Otherwise, Alternate(3) will be taken IF:
								The lookahead set: 
									k==1: {'\r' }
									k==2: {
										'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
										'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
										'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
										'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
										'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
										'\u001d', '\u001e', '\u001f', ' ', '!', '"', 
										'#', '$', '%', '&', '\'', '(', 
										')', '*', '+', ',', '-', '.', 
										'/', '0', '1', '2', '3', '4', 
										'5', '6', '7', '8', '9', ':', 
										';', '<', '=', '>', '?', '@', 
										'A', 'B', 'C', 'D', 'E', 'F', 
										'G', 'H', 'I', 'J', 'K', 'L', 
										'M', 'N', 'O', 'P', 'Q', 'R', 
										'S', 'T', 'U', 'V', 'W', 'X', 
										'Y', 'Z', '[', '\\', ']', '^', 
										'_', '`', 'a', 'b', 'c', 'd', 
										'e', 'f', 'g', 'h', 'i', 'j', 
										'k', 'l', 'm', 'n', 'o', 'p', 
										'q', 'r', 's', 't', 'u', 'v', 
										'w', 'x', 'y', 'z', '{', '|', 
										'}', '~', '\u007f', '\u0080', '\u0081', '\u0082', 
										'\u0083', '\u0084', '\u0085', '\u0086', '\u0087', '\u0088', 
										'\u0089', '\u008a', '\u008b', '\u008c', '\u008d', '\u008e', 
										'\u008f', '\u0090', '\u0091', '\u0092', '\u0093', '\u0094', 
										'\u0095', '\u0096', '\u0097', '\u0098', '\u0099', '\u009a', 
										'\u009b', '\u009c', '\u009d', '\u009e', '\u009f', '\u00a0', 
										'\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', 
										'\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', 
										'\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', 
										'\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', 
										'\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', 
										'\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', 
										'\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', 
										'\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', 
										'\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', 
										'\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', 
										'\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', 
										'\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', 
										'\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', 
										'\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', 
										'\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', 
										'\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
									 }
									k==3: {
										'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
										'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\n', 
										'\u000b', '\u000c', '\r', '\u000e', '\u000f', '\u0010', 
										'\u0011', '\u0012', '\u0013', '\u0014', '\u0015', '\u0016', 
										'\u0017', '\u0018', '\u0019', '\u001a', '\u001b', '\u001c', 
										'\u001d', '\u001e', '\u001f', ' ', '!', '"', 
										'#', '$', '%', '&', '\'', '(', 
										')', '*', '+', ',', '-', '.', 
										'/', '0', '1', '2', '3', '4', 
										'5', '6', '7', '8', '9', ':', 
										';', '<', '=', '>', '?', '@', 
										'A', 'B', 'C', 'D', 'E', 'F', 
										'G', 'H', 'I', 'J', 'K', 'L', 
										'M', 'N', 'O', 'P', 'Q', 'R', 
										'S', 'T', 'U', 'V', 'W', 'X', 
										'Y', 'Z', '[', '\\', ']', '^', 
										'_', '`', 'a', 'b', 'c', 'd', 
										'e', 'f', 'g', 'h', 'i', 'j', 
										'k', 'l', 'm', 'n', 'o', 'p', 
										'q', 'r', 's', 't', 'u', 'v', 
										'w', 'x', 'y', 'z', '{', '|', 
										'}', '~', '\u007f', '\u0080', '\u0081', '\u0082', 
										'\u0083', '\u0084', '\u0085', '\u0086', '\u0087', '\u0088', 
										'\u0089', '\u008a', '\u008b', '\u008c', '\u008d', '\u008e', 
										'\u008f', '\u0090', '\u0091', '\u0092', '\u0093', '\u0094', 
										'\u0095', '\u0096', '\u0097', '\u0098', '\u0099', '\u009a', 
										'\u009b', '\u009c', '\u009d', '\u009e', '\u009f', '\u00a0', 
										'\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', 
										'\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', 
										'\u00ad', '\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', 
										'\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', 
										'\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', 
										'\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', 
										'\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', 
										'\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', 
										'\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', 
										'\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', 
										'\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', 
										'\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', 
										'\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', 
										'\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', 
										'\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', 
										'\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff'
									 }
								is matched.
								Match character '\r'
								ACTION: newline();
								
								Otherwise, Alternate(4) will be taken IF:
								The lookahead set: 
									{ '\n' }
								is matched.
								Match character '\n'
								ACTION: newline();
								
								Otherwise, Alternate(5) will be taken IF:
								The lookahead set: 
									{ 
										'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
										'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
										'\u000c', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', 
										'\u0013', '\u0014', '\u0015', '\u0016', '\u0017', '\u0018', 
										'\u0019', '\u001a', '\u001b', '\u001c', '\u001d', '\u001e', 
										'\u001f', ' ', '!', '"', '#', '$', 
										'%', '&', '\'', '(', ')', '+', 
										',', '-', '.', '/', '0', '1', 
										'2', '3', '4', '5', '6', '7', 
										'8', '9', ':', ';', '<', '=', 
										'>', '?', '@', 'A', 'B', 'C', 
										'D', 'E', 'F', 'G', 'H', 'I', 
										'J', 'K', 'L', 'M', 'N', 'O', 
										'P', 'Q', 'R', 'S', 'T', 'U', 
										'V', 'W', 'X', 'Y', 'Z', '[', 
										'\\', ']', '^', '_', '`', 'a', 
										'b', 'c', 'd', 'e', 'f', 'g', 
										'h', 'i', 'j', 'k', 'l', 'm', 
										'n', 'o', 'p', 'q', 'r', 's', 
										't', 'u', 'v', 'w', 'x', 'y', 
										'z', '{', '|', '}', '~', '\u007f', 
										'\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\u0085', 
										'\u0086', '\u0087', '\u0088', '\u0089', '\u008a', '\u008b', 
										'\u008c', '\u008d', '\u008e', '\u008f', '\u0090', '\u0091', 
										'\u0092', '\u0093', '\u0094', '\u0095', '\u0096', '\u0097', 
										'\u0098', '\u0099', '\u009a', '\u009b', '\u009c', '\u009d', 
										'\u009e', '\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', 
										'\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', 
										'\u00aa', '\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', 
										'\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', 
										'\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', 
										'\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', 
										'\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', 
										'\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', 
										'\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', 
										'\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', 
										'\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', 
										'\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', 
										'\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', 
										'\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', 
										'\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', 
										'\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', 
										'\u00fe', '\u00ff'
									 }
								is matched.
								Start of alternative block.
									Start of an alternative block.
										The lookahead set for this block is:
											{ 
												'\u0000', '\u0001', '\u0002', '\u0003', '\u0004', 
												'\u0005', '\u0006', '\u0007', '\u0008', '\t', '\u000b', 
												'\u000c', '\u000e', '\u000f', '\u0010', '\u0011', '\u0012', 
												'\u0013', '\u0014', '\u0015', '\u0016', '\u0017', '\u0018', 
												'\u0019', '\u001a', '\u001b', '\u001c', '\u001d', '\u001e', 
												'\u001f', ' ', '!', '"', '#', '$', 
												'%', '&', '\'', '(', ')', '+', 
												',', '-', '.', '/', '0', '1', 
												'2', '3', '4', '5', '6', '7', 
												'8', '9', ':', ';', '<', '=', 
												'>', '?', '@', 'A', 'B', 'C', 
												'D', 'E', 'F', 'G', 'H', 'I', 
												'J', 'K', 'L', 'M', 'N', 'O', 
												'P', 'Q', 'R', 'S', 'T', 'U', 
												'V', 'W', 'X', 'Y', 'Z', '[', 
												'\\', ']', '^', '_', '`', 'a', 
												'b', 'c', 'd', 'e', 'f', 'g', 
												'h', 'i', 'j', 'k', 'l', 'm', 
												'n', 'o', 'p', 'q', 'r', 's', 
												't', 'u', 'v', 'w', 'x', 'y', 
												'z', '{', '|', '}', '~', '\u007f', 
												'\u0080', '\u0081', '\u0082', '\u0083', '\u0084', '\u0085', 
												'\u0086', '\u0087', '\u0088', '\u0089', '\u008a', '\u008b', 
												'\u008c', '\u008d', '\u008e', '\u008f', '\u0090', '\u0091', 
												'\u0092', '\u0093', '\u0094', '\u0095', '\u0096', '\u0097', 
												'\u0098', '\u0099', '\u009a', '\u009b', '\u009c', '\u009d', 
												'\u009e', '\u009f', '\u00a0', '\u00a1', '\u00a2', '\u00a3', 
												'\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', 
												'\u00aa', '\u00ab', '\u00ac', '\u00ad', '\u00ae', '\u00af', 
												'\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', 
												'\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', 
												'\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', 
												'\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', 
												'\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', 
												'\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', 
												'\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', 
												'\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', 
												'\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', 
												'\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', 
												'\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', 
												'\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', 
												'\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', 
												'\u00fe', '\u00ff'
											 }
										This block has multiple alternatives:
											
											Alternate(1) will be taken IF:
											The lookahead set: 
												{ '*' }
											is matched.
											Match character '*'
											
											Otherwise, Alternate(2) will be taken IF:
											The lookahead set: 
												{ '\n' }
											is matched.
											Match character '\n'
											
											Otherwise, Alternate(3) will be taken IF:
											The lookahead set: 
												{ '\r' }
											is matched.
											Match character '\r'
											
											OTHERWISE, a NoViableAlt exception will be thrown
											
										End of alternatives
									End of alternative block.
								
								OTHERWISE, a NoViableAlt exception will be thrown
								
							End of alternatives
						End of alternative block.
					End ZERO-OR-MORE block.
					Match string literal "*/"
					ACTION: $setType(Token.SKIP);
					
					OTHERWISE, a NoViableAlt exception will be thrown
					
				End of alternative block.
			*** End Lexer Rule: mML_COMMENT
		
		*** End User-defined Lexer rules:
