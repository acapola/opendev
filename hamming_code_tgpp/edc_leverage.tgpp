``
#find out the directory of this script
#that allow us to find the input files no matter what is the current directory
set scriptDir [file dirname [info script]]

#################
# utility procs #
#################
source [file join $scriptDir misc_utils.tcl]



##############
# main procs #
##############

#return a mapping of input bits which maximize detection capabilities in input's units
proc edcLeverage { inputWidth inputUnit edcInputWidth edcOutputWidth edcMaxDet } {
	set out [dict create]
	set logicalGroups [edcLogicalLeverage $inputWidth $inputUnit $edcInputWidth ]
	set physicalGroups [edcPhysicalLeverage $logicalGroups $inputUnit $edcOutputWidth $edcMaxDet]
	dict set out logicalGroups $logicalGroups
	dict set out physicalGroups $physicalGroups
	return $out
}

proc edcPhysicalLeverageCheckGroup { unit logicalGroup edcMaxDet phyGroupDict } {
	set phyGroupLogicalGroupsCnt [dict get $phyGroupDict logicalGroupsCnt]
	set phyGroupUnitsCnt [dict get $phyGroupDict unitsCnt]
	if {[dict get $phyGroupLogicalGroupsCnt $logicalGroup] >= $edcMaxDet } {
		#puts "logicalGroup: [dict get $phyGroupLogicalGroupsCnt $logicalGroup] > $edcMaxDet"
		return 0
	}
	if {[dict get $phyGroupUnitsCnt $unit] >= $edcMaxDet } {
		#puts "unit: [dict get $phyGroupUnitsCnt $unit] > $edcMaxDet"
		return 0
	}
	#puts "accepted with [dict get $phyGroupLogicalGroupsCnt $logicalGroup] and [dict get $phyGroupUnitsCnt $unit]"
	return 1
}
proc edcPhysicalLeverageAddToGroup { bit unit logicalGroup phyGroupsName phyGroup } {
	upvar $phyGroupsName phyGroups
	dict with phyGroups $phyGroup {
		lappend dataBits $bit
		dict with unitsCnt {
			incr $unit
		}
		dict with logicalGroupsCnt {
			incr $logicalGroup
		}
	}
}
proc edcPhysicalLeverage { logicalGroups inputWidth inputUnit edcOutputWidth edcMaxDet } {
	set nUnits [expr $inputWidth / $inputUnit]
	assertEqual [expr $nUnits*$inputUnit] $inputWidth
	set phyGroups [dict create ]
	set phyGroupsCnt 0
	#spread the databits
	dict for {logicalGroup bits} $logicalGroups {
		foreach bit $bits {
			set unit [divideRoundDown $bit $inputUnit]
			set done 0
			for {set i 0} {$i<$phyGroupsCnt} {incr i} {
				set phyGroupDict [dict get $phyGroups $i]
				#puts $phyGroupDict
				if {[edcPhysicalLeverageCheckGroup $unit $logicalGroup $edcMaxDet $phyGroupDict]} {
					edcPhysicalLeverageAddToGroup $bit $unit $logicalGroup phyGroups $i
					set done 1
					#exit the loop
					set i $phyGroupsCnt
				}
			}
			if {0==$done} { #need to create a new group
				set newPhyGroup [dict create dataBits [list] edcBits [list] logicalGroupsCnt [dict create] unitsCnt [dict create]]
				foreach i [dict keys $logicalGroups] { dict set newPhyGroup logicalGroupsCnt $i 0}
				for {set i 0} {$i<$nUnits} {incr i} { dict set newPhyGroup unitsCnt $i 0}
				dict set phyGroups $phyGroupsCnt $newPhyGroup
				edcPhysicalLeverageAddToGroup $bit $unit $logicalGroup phyGroups $phyGroupsCnt
				incr phyGroupsCnt	
			}
		}
	}
	#spread the edc bits
	#TODO
	return $phyGroups
}

proc edcLogicalLeverage { inputWidth inputUnit edcInputWidth } {
	set nEdcGroups [divideRoundUp $inputWidth $edcInputWidth]
	set actualEdcInputWidth [divideRoundUp $inputWidth $nEdcGroups]
	set nUnitBitsPerEdcGroup [divideRoundUp $inputUnit $nEdcGroups]
	set nUnits [expr $inputWidth / $inputUnit]
	assertEqual [expr $nUnits*$inputUnit] $inputWidth
	set groups [dict create]
	set group 0
	for {set bit 0} {$bit<$inputUnit} {incr bit} {
		for {set unit 0} {$unit<$nUnits} {incr unit} {
			dict lappend groups $group [expr $unit*$inputUnit+$bit]
			if { [llength [dict get $groups $group]] >= $actualEdcInputWidth - 1 } {
				set group [expr ($group+1)%$nEdcGroups]
			}
		}
	}
	return $groups
}

#verilog output
#tgpp::source [file join $scriptDir hamming_code.tgpp.v]

##################################
# command line arguments parsing #
##################################
#parse command line only if this file is executed as a stand alone generator (ie. not included in another file)
dbgPuts "[info ex argv0] && [file tail [info script]] == [file tail $argv0]"
if {[info ex argv0] && [file tail [info script]] == [file tail $argv0]} {

	if {[llength $argv] < 5} {
		error "need 5 arguments, got [llength $argv]"
	}
    set inputWidth [lindex $argv 0]
	set inputUnit [lindex $argv 1]
	set edcInputWidth [lindex $argv 2]
	set edcOutputWidth [lindex $argv 3]
	set edcMaxDet [lindex $argv 4]

	
	set groups [dict_sort [edcLogicalLeverage $inputWidth $inputUnit $edcInputWidth] -integer]
	puts "logical groups:"
	printIntDict $groups %3d
	set phyGroups [dict_sort [edcPhysicalLeverage $groups $inputWidth $inputUnit $edcOutputWidth $edcMaxDet] -integer]
	puts "physical groups:"
	printIntDict $phyGroups %3d dataBits
	#printIntDict $phyGroups %3d logicalGroupsCnt
	#printIntDict $phyGroups %3d unitsCnt
}