``
#find out the directory of this script
#that allow us to find the input files no matter what is the current directory
set scriptDir [file dirname [info script]]

#################
# utility procs #
#################
source [file join $scriptDir misc_utils.tcl]



##############
# main procs #
##############

#return a mapping of input bits which maximize detection capabilities in input's units
proc edcLeverage { inputWidth inputUnit edcInputWidth edcOutputWidth edcMaxDet rngVariable } {
	upvar 1 $rngVariable rng
    puts [$rng getBits 32]
	if {[isEdcPerfectLogicalLeveragePossible $inputWidth $inputUnit $edcInputWidth $edcMaxDet] } {
		puts "INFO: Perfect logical leverage possible."
	} else {
		set autoParams [edcPerfectLogicalLeverage $inputWidth $inputUnit $edcMaxDet]
		puts "WARNING: Perfect logical leverage NOT possible."
		puts "Parameters for perfect logical leverage: ${autoParams}."
	}
	set logicalGroups [edcLogicalLeverage $inputWidth $inputUnit $edcInputWidth rng]
	if {0} {
		set physicalGroups [edcPhysicalLeverage $logicalGroups $inputWidth $inputUnit $edcOutputWidth $edcMaxDet]
		set physicalGroupsSummary [dict create]
		foreach phyGroup [dict keys $physicalGroups] {
			set dataBits [dict get $physicalGroups $phyGroup dataBits]
			set edcBits  [dict get $physicalGroups $phyGroup edcBits]
			foreach bit $dataBits {
				dict lappend physicalGroupsSummary $phyGroup d$bit
			}
			foreach bit $edcBits {
				dict lappend physicalGroupsSummary $phyGroup e$bit
			}
		}
	}
	set physicalGroups [edcPhysicalLeverage2 $logicalGroups $inputWidth $inputUnit $edcOutputWidth $edcMaxDet rng]
	set physicalGroupsSummary [dict create]
	foreach phyGroup [dict keys $physicalGroups] {
		foreach bit [dict get $physicalGroups $phyGroup bits] {
			dict lappend physicalGroupsSummary $phyGroup $bit
		}
	}
	return [varsToDict logicalGroups physicalGroups physicalGroupsSummary]
}

#assign data bits and EDC bits to physical groups such that:
# - A physical group contain not more than edcMaxDet bits from a logical group (including the EDC bits for that group)
# - each physical group contain a mix of data and EDC bits. 
#    -> This is desirable since EDC bits add noise to the local EM emissions
#    -> Well separated EDC bits would make dual laser attacks easier (one could corrupt many EDC bits with laser1 and a single data bit with laser2)  
proc edcPhysicalLeverage2 { logicalGroups inputWidth inputUnit edcOutputWidth edcMaxDet rngVariable } {
	upvar 1 $rngVariable rng
    
	#set nUnits [expr $inputWidth / $inputUnit]
	#assertEqual [expr $nUnits*$inputUnit] $inputWidth
	set nUnits [divideRoundUp $inputWidth $inputUnit]

	#create logical group including EDC bits
	#data bits start by d and EDC bits by e
	set fullLogicalGroups [dict create]
	foreach group [dict keys $logicalGroups] {
		set dataBits [dict get $logicalGroups $group]
		foreach bit $dataBits {
			dict lappend fullLogicalGroups $group d$bit
		}
		for {set edcBit 0} {$edcBit<$edcOutputWidth} {incr edcBit} {
			set bit [expr $group*$edcOutputWidth+$edcBit]
			dict lappend fullLogicalGroups $group e$bit
		}
	}
	#randomize the order of bits within the groups
	dict for {logicalGroup bits} $fullLogicalGroups {
		lshuffle bits rng
		dict set fullLogicalGroups $logicalGroup $bits
	}
	#printIntDict $fullLogicalGroups %4s 
	#spread the bits
	set phyGroups [dict create ]
	set phyGroupsCnt 0
	dict for {logicalGroup bits} $fullLogicalGroups {
		foreach bit $bits {
			set done 0
			for {set i 0} {$i<$phyGroupsCnt} {incr i} {
				set phyGroupDict [dict get $phyGroups $i]
				if {[dict get $phyGroupDict logicalGroupsCnt $logicalGroup] < $edcMaxDet} {
					#AddToGroup
					dict with phyGroups $i {
						lappend bits $bit
						dict with logicalGroupsCnt {
							incr $logicalGroup
						}
					}
					set done 1
					#exit the loop
					set i $phyGroupsCnt
				}
			}
			if {0==$done} { #need to create a new group
				set newPhyGroup [dict create bits [list] logicalGroupsCnt [dict create] ]
				foreach i [dict keys $logicalGroups] { dict set newPhyGroup logicalGroupsCnt $i 0}
				dict set phyGroups $phyGroupsCnt $newPhyGroup
				#AddToGroup
				dict with phyGroups $phyGroupsCnt {
					lappend bits $bit
					dict with logicalGroupsCnt {
						incr $logicalGroup
					}
				}
				incr phyGroupsCnt	
			}
		}
	}
	return [dict_sort $phyGroups -integer]
}


proc edcPhysicalLeverageCheckGroup { unit logicalGroup edcMaxDet phyGroupDict } {
	set phyGroupLogicalGroupsCnt [dict get $phyGroupDict logicalGroupsCnt]
	set phyGroupUnitsCnt [dict get $phyGroupDict unitsCnt]
	if {[dict get $phyGroupLogicalGroupsCnt $logicalGroup] >= $edcMaxDet } {
		#puts "logicalGroup: [dict get $phyGroupLogicalGroupsCnt $logicalGroup] > $edcMaxDet"
		return 0
	}
	if {[dict get $phyGroupUnitsCnt $unit] >= $edcMaxDet } {
		#puts "unit: [dict get $phyGroupUnitsCnt $unit] > $edcMaxDet"
		return 0
	}
	#puts "accepted with [dict get $phyGroupLogicalGroupsCnt $logicalGroup] and [dict get $phyGroupUnitsCnt $unit]"
	return 1
}
proc edcPhysicalLeverageAddToGroup { bit unit logicalGroup phyGroupsName phyGroup {isEdcBit 0} } {
	upvar $phyGroupsName phyGroups
	dict with phyGroups $phyGroup {
		if {$isEdcBit} {
			lappend edcBits $bit
		} else {
			lappend dataBits $bit
			dict with unitsCnt {
				incr $unit
			}
		}
		dict with logicalGroupsCnt {
			incr $logicalGroup
		}
	}
}
 
#return the minimum number of EDC circuits required to achieve perfect logical leverage as well as their maximum input width 
proc edcPerfectLogicalLeverage { inputWidth inputUnit edcMaxDet } {
	#set nEdcGroups [divideRoundUp $inputWidth $edcInputWidth]
	set minEdcGroups [divideRoundUp $inputUnit $edcMaxDet]
	set maxEdcInputWidth [divideRoundDown $inputWidth $minEdcGroups]
	assertEqual 1 [isEdcPerfectLogicalLeveragePossible $inputWidth $inputUnit $maxEdcInputWidth $edcMaxDet]
	return [varsToDict minEdcGroups maxEdcInputWidth]
}

#return 1 if the circuit guarantees that any fault impacting a single unit is detected
#(assuming optimal spread of input bits to EDC circuits)
proc isEdcPerfectLogicalLeveragePossible { inputWidth inputUnit edcInputWidth edcMaxDet } {
	set nEdcGroups [divideRoundUp $inputWidth $edcInputWidth]
	set nUnitBitsPerGroup [divideRoundUp $inputUnit $nEdcGroups]
	set minUnitSplit [divideRoundUp $inputUnit $edcMaxDet]
	set check1 [expr $nEdcGroups >= $minUnitSplit]
	set check2 [expr $edcMaxDet >= $nUnitBitsPerGroup]
	return $check1 && $check2
}

#Assume an EDC protected register (ECC not considered so far)
#the data total width is $inputWidth
#the data is protected by identical EDC circuits having an input width $edcInputWidth
#the data is divided in an integer number of units, a unit consist of $inputUnit contiguous bits.
#the goal is to minimize the number of bits of any given units assigned to the same EDC circuits.
proc edcLogicalLeverage { inputWidth inputUnit edcInputWidth {rngVariable ""} } {
	set nEdcGroups [divideRoundUp $inputWidth $edcInputWidth]
	set actualEdcInputWidth [divideRoundUp $inputWidth $nEdcGroups]
	set nUnitBitsPerEdcGroup [divideRoundUp $inputUnit $nEdcGroups]
	
	#set nUnits [expr $inputWidth / $inputUnit]
	#assertEqual [expr $nUnits*$inputUnit] $inputWidth
	set nUnits [divideRoundUp $inputWidth $inputUnit]

	set groups [dict create]
	set group 0
	if {[string length $rngVariable]==0} {
		for {set bit 0} {$bit<$inputUnit} {incr bit} {
			for {set unit 0} {$unit<$nUnits} {incr unit} {
				dict lappend groups $group [expr $unit*$inputUnit+$bit]
				if { [llength [dict get $groups $group]] >= $actualEdcInputWidth - 1 } {
					set group [expr ($group+1)%$nEdcGroups]
				}
			}
		}
	} else {
		upvar 1 $rngVariable rng
		set units [list]
		for {set unit 0} {$unit<$nUnits} {incr unit} {
			set bits [list]
			for {set bit 0} {$bit<$inputUnit} {incr bit} {
				lappend bits [expr $unit*$inputUnit+$bit]
			}
			lshuffle bits rng
			lappend units $bits
		}
		#puts $units
		lshuffle units rng
		#puts $units
		for {set bit 0} {$bit<$inputUnit} {incr bit} {
			for {set unit 0} {$unit<$nUnits} {incr unit} {
				set unitList [lindex $units $unit] 
				dict lappend groups $group [lindex $unitList $bit]
				if { [llength [dict get $groups $group]] >= $actualEdcInputWidth - 1 } {
					set group [expr ($group+1)%$nEdcGroups]
				}
			}
		}
	}
	return [dict_sort $groups -integer]
}

#verilog output
tgpp::source [file join $scriptDir edc_logical_leverage.tgpp.v]

##################################
# command line arguments parsing #
##################################
#parse command line only if this file is executed as a stand alone generator (ie. not included in another file)
dbgPuts "[info ex argv0] && [file tail [info script]] == [file tail $argv0]"
if {[info ex argv0] && [file tail [info script]] == [file tail $argv0]} {

	if {[llength $argv] < 5} {
		error "need 5 arguments, got [llength $argv]"
	}
    set inputWidth [lindex $argv 0]
	set inputUnit [lindex $argv 1]
	set edcInputWidth [lindex $argv 2]
	set edcOutputWidth [lindex $argv 3]
	set edcMaxDet [lindex $argv 4]

	set rng [::nimp::random create]
	
	#set groups [dict_sort [edcLogicalLeverage $inputWidth $inputUnit $edcInputWidth] -integer]
	dictToVars [edcLeverage $inputWidth $inputUnit $edcInputWidth $edcOutputWidth $edcMaxDet rng]
	
	puts "logical groups:"
	printIntDict $logicalGroups %3d
	puts "physical groups summary:"
	printIntDict $physicalGroupsSummary %4s 
	
	::tgpp::off all
	::tgpp::on edc_logical_leverage.v
``
`edcLogicalLeverageVerilogFunction test $logicalGroups`
``  
	#delete default output
	::tgpp::renameOutput tmp
	::tgpp::renameOutput tmp ""
}
``