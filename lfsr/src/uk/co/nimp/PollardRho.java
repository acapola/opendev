package uk.co.nimp;

/*************************************************************************
 *  Compilation:  javac PollardRho.java
 *  Execution:    java PollardRho N
 *
 *  Factor N using the Pollard-Rho method.
 *
 *  % java PollardRho 44343535354351600000003434353
 *  149
 *  329569479697
 *  903019357561501
 *
 *************************************************************************/

import java.math.BigInteger;
import java.util.*;
//import java.security.SecureRandom;


class PollardRho {
    private final static BigInteger ZERO = new BigInteger("0");
    private final static BigInteger ONE  = new BigInteger("1");
    private final static BigInteger TWO  = new BigInteger("2");
    //private final static SecureRandom random = new SecureRandom();
    private final static Random random = new Random();

    public static BigInteger rho(BigInteger n) {
        BigInteger divisor;
        BigInteger c  = new BigInteger(n.bitLength(), random);
        BigInteger x  = new BigInteger(n.bitLength(), random);
        BigInteger xx = x;

        // check divisibility by 2
        if (n.mod(TWO).compareTo(ZERO) == 0) return TWO;

        do {
            x  =  x.multiply(x).mod(n).add(c).mod(n);
            xx = xx.multiply(xx).mod(n).add(c).mod(n);
            xx = xx.multiply(xx).mod(n).add(c).mod(n);
            divisor = x.subtract(xx).gcd(n);
        } while((divisor.compareTo(ONE)) == 0);

        return divisor;
    }

    public static void factor(BigInteger n, List<BigInteger> factors) {
        if (n.compareTo(ONE) == 0) return;
        if (n.isProbablePrime(20)) {
            //System.out.println(n);
            factors.add(n);
            return;
        }
        BigInteger divisor = rho(n);
        factor(divisor,factors);
        factor(n.divide(divisor),factors);
    }
    public static BigInteger[] factor(BigInteger n) {
        if(n.compareTo(BigInteger.ONE)<=0){
            //BigInteger []out = new BigInteger[1];
            //out[0] = BigInteger.ZERO;
            return new BigInteger[0];
        }
        ArrayList<BigInteger> factors = new ArrayList<BigInteger>();
        factor(n,factors);
        Collections.sort(factors);
        return factors.toArray(new BigInteger[factors.size()]);
    }
    public static Map<BigInteger,Integer> factorMap(BigInteger n){
        Map<BigInteger,Integer> factorsMap = new HashMap<BigInteger,Integer>();
        if(n.compareTo(BigInteger.ONE)<=0){
            //factorsMap.put(BigInteger.ZERO,0);
            return factorsMap;
        }
        ArrayList<BigInteger> factors = new ArrayList<BigInteger>();
        factor(n,factors);
        for(BigInteger f: factors){
            int power = 1;
            if(factorsMap.containsKey(f)) power += factorsMap.get(f);
            factorsMap.put(f,power);
        }
        return factorsMap;
    }

    public static Map<Integer,Integer> factorPowerOfTwoMinusOne(int powerOfTwoMinusOne){
        return intFactorsPowersOfTwoMinusOne.get(powerOfTwoMinusOne);
    }
    public static Map<Long,Integer> factorPowerOfTwoMinusOne(long powerOfTwoMinusOne){
        return longFactorsPowersOfTwoMinusOne.get(powerOfTwoMinusOne);
    }
    public static Map<BigInteger,Integer> factorPowerOfTwoMinusOne(BigInteger powerOfTwoMinusOne){
        return bigIntegerFactorsPowersOfTwoMinusOne.get(powerOfTwoMinusOne);
    }

    public static void main(String[] args) {
        BigInteger n;
        if(args.length==0){
            Scanner sc = new Scanner(System.in);

            System.out.print("number to factor: ");
            n= new BigInteger(sc.nextLine());
        } else {
            n = new BigInteger(args[0]);
        }
        BigInteger[] factors = factor(n);
        for(BigInteger f:factors){
            System.out.println(f);
        }
    }
    static Map<Integer,Map<Integer,Integer>> intFactorsPowersOfTwoMinusOne = new HashMap<Integer,Map<Integer,Integer>>(31);
    static {
        Map<Integer,Integer> factorsMap = new HashMap<Integer,Integer>();
        factorsMap.put(1,1);
        intFactorsPowersOfTwoMinusOne.put(0x1,factorsMap);
        factorsMap.clear();
        factorsMap.put(3,1);
        intFactorsPowersOfTwoMinusOne.put(0x3,factorsMap);
        factorsMap.clear();
        factorsMap.put(7,1);
        intFactorsPowersOfTwoMinusOne.put(0x7,factorsMap);
        factorsMap.clear();
        factorsMap.put(3,1);
        factorsMap.put(5,1);
        intFactorsPowersOfTwoMinusOne.put(0xf,factorsMap);
        factorsMap.clear();
        factorsMap.put(31,1);
        intFactorsPowersOfTwoMinusOne.put(0x1f,factorsMap);
        factorsMap.clear();
        factorsMap.put(3,2);
        factorsMap.put(7,1);
        intFactorsPowersOfTwoMinusOne.put(0x3f,factorsMap);
        factorsMap.clear();
        factorsMap.put(127,1);
        intFactorsPowersOfTwoMinusOne.put(0x7f,factorsMap);
        factorsMap.clear();
        factorsMap.put(17,1);
        factorsMap.put(3,1);
        factorsMap.put(5,1);
        intFactorsPowersOfTwoMinusOne.put(0xff,factorsMap);
        factorsMap.clear();
        factorsMap.put(7,1);
        factorsMap.put(73,1);
        intFactorsPowersOfTwoMinusOne.put(0x1ff,factorsMap);
        factorsMap.clear();
        factorsMap.put(3,1);
        factorsMap.put(11,1);
        factorsMap.put(31,1);
        intFactorsPowersOfTwoMinusOne.put(0x3ff,factorsMap);
        factorsMap.clear();
        factorsMap.put(23,1);
        factorsMap.put(89,1);
        intFactorsPowersOfTwoMinusOne.put(0x7ff,factorsMap);
        factorsMap.clear();
        factorsMap.put(3,2);
        factorsMap.put(5,1);
        factorsMap.put(7,1);
        factorsMap.put(13,1);
        intFactorsPowersOfTwoMinusOne.put(0xfff,factorsMap);
        factorsMap.clear();
        factorsMap.put(8191,1);
        intFactorsPowersOfTwoMinusOne.put(0x1fff,factorsMap);
        factorsMap.clear();
        factorsMap.put(3,1);
        factorsMap.put(127,1);
        factorsMap.put(43,1);
        intFactorsPowersOfTwoMinusOne.put(0x3fff,factorsMap);
        factorsMap.clear();
        factorsMap.put(7,1);
        factorsMap.put(31,1);
        factorsMap.put(151,1);
        intFactorsPowersOfTwoMinusOne.put(0x7fff,factorsMap);
        factorsMap.clear();
        factorsMap.put(17,1);
        factorsMap.put(257,1);
        factorsMap.put(3,1);
        factorsMap.put(5,1);
        intFactorsPowersOfTwoMinusOne.put(0xffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(131071,1);
        intFactorsPowersOfTwoMinusOne.put(0x1ffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(19,1);
        factorsMap.put(3,3);
        factorsMap.put(7,1);
        factorsMap.put(73,1);
        intFactorsPowersOfTwoMinusOne.put(0x3ffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(524287,1);
        intFactorsPowersOfTwoMinusOne.put(0x7ffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(3,1);
        factorsMap.put(5,2);
        factorsMap.put(11,1);
        factorsMap.put(41,1);
        factorsMap.put(31,1);
        intFactorsPowersOfTwoMinusOne.put(0xfffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(337,1);
        factorsMap.put(7,2);
        factorsMap.put(127,1);
        intFactorsPowersOfTwoMinusOne.put(0x1fffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(3,1);
        factorsMap.put(683,1);
        factorsMap.put(23,1);
        factorsMap.put(89,1);
        intFactorsPowersOfTwoMinusOne.put(0x3fffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(178481,1);
        factorsMap.put(47,1);
        intFactorsPowersOfTwoMinusOne.put(0x7fffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(17,1);
        factorsMap.put(3,2);
        factorsMap.put(5,1);
        factorsMap.put(7,1);
        factorsMap.put(13,1);
        factorsMap.put(241,1);
        intFactorsPowersOfTwoMinusOne.put(0xffffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(1801,1);
        factorsMap.put(601,1);
        factorsMap.put(31,1);
        intFactorsPowersOfTwoMinusOne.put(0x1ffffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(3,1);
        factorsMap.put(2731,1);
        factorsMap.put(8191,1);
        intFactorsPowersOfTwoMinusOne.put(0x3ffffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(262657,1);
        factorsMap.put(7,1);
        factorsMap.put(73,1);
        intFactorsPowersOfTwoMinusOne.put(0x7ffffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(3,1);
        factorsMap.put(5,1);
        factorsMap.put(113,1);
        factorsMap.put(127,1);
        factorsMap.put(43,1);
        factorsMap.put(29,1);
        intFactorsPowersOfTwoMinusOne.put(0xfffffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(1103,1);
        factorsMap.put(233,1);
        factorsMap.put(2089,1);
        intFactorsPowersOfTwoMinusOne.put(0x1fffffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(3,2);
        factorsMap.put(7,1);
        factorsMap.put(11,1);
        factorsMap.put(331,1);
        factorsMap.put(31,1);
        factorsMap.put(151,1);
        intFactorsPowersOfTwoMinusOne.put(0x3fffffff,factorsMap);
        factorsMap.clear();
        factorsMap.put(2147483647,1);
        intFactorsPowersOfTwoMinusOne.put(0x7fffffff,factorsMap);
    }
    static Map<Long,Map<Long,Integer>> longFactorsPowersOfTwoMinusOne = new HashMap<Long,Map<Long,Integer>>(63);
    static {
        Map<Long,Integer> factorsMap = new HashMap<Long,Integer>();
        factorsMap.put(1L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1L,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3L,factorsMap);
        factorsMap.clear();
        factorsMap.put(7L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7L,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,1);
        factorsMap.put(5L,1);
        longFactorsPowersOfTwoMinusOne.put(0xfL,factorsMap);
        factorsMap.clear();
        factorsMap.put(31L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1fL,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,2);
        factorsMap.put(7L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3fL,factorsMap);
        factorsMap.clear();
        factorsMap.put(127L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7fL,factorsMap);
        factorsMap.clear();
        factorsMap.put(17L,1);
        factorsMap.put(3L,1);
        factorsMap.put(5L,1);
        longFactorsPowersOfTwoMinusOne.put(0xffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(7L,1);
        factorsMap.put(73L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1ffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,1);
        factorsMap.put(11L,1);
        factorsMap.put(31L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3ffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(23L,1);
        factorsMap.put(89L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7ffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,2);
        factorsMap.put(5L,1);
        factorsMap.put(7L,1);
        factorsMap.put(13L,1);
        longFactorsPowersOfTwoMinusOne.put(0xfffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(8191L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1fffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,1);
        factorsMap.put(127L,1);
        factorsMap.put(43L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3fffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(7L,1);
        factorsMap.put(31L,1);
        factorsMap.put(151L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7fffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(17L,1);
        factorsMap.put(257L,1);
        factorsMap.put(3L,1);
        factorsMap.put(5L,1);
        longFactorsPowersOfTwoMinusOne.put(0xffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(131071L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1ffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(19L,1);
        factorsMap.put(3L,3);
        factorsMap.put(7L,1);
        factorsMap.put(73L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3ffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(524287L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7ffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,1);
        factorsMap.put(5L,2);
        factorsMap.put(41L,1);
        factorsMap.put(11L,1);
        factorsMap.put(31L,1);
        longFactorsPowersOfTwoMinusOne.put(0xfffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(337L,1);
        factorsMap.put(7L,2);
        factorsMap.put(127L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1fffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,1);
        factorsMap.put(683L,1);
        factorsMap.put(23L,1);
        factorsMap.put(89L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3fffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(178481L,1);
        factorsMap.put(47L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7fffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(17L,1);
        factorsMap.put(3L,2);
        factorsMap.put(5L,1);
        factorsMap.put(7L,1);
        factorsMap.put(13L,1);
        factorsMap.put(241L,1);
        longFactorsPowersOfTwoMinusOne.put(0xffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(1801L,1);
        factorsMap.put(601L,1);
        factorsMap.put(31L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1ffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,1);
        factorsMap.put(2731L,1);
        factorsMap.put(8191L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3ffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(262657L,1);
        factorsMap.put(7L,1);
        factorsMap.put(73L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7ffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,1);
        factorsMap.put(5L,1);
        factorsMap.put(113L,1);
        factorsMap.put(127L,1);
        factorsMap.put(43L,1);
        factorsMap.put(29L,1);
        longFactorsPowersOfTwoMinusOne.put(0xfffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(1103L,1);
        factorsMap.put(233L,1);
        factorsMap.put(2089L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1fffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,2);
        factorsMap.put(7L,1);
        factorsMap.put(11L,1);
        factorsMap.put(331L,1);
        factorsMap.put(31L,1);
        factorsMap.put(151L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3fffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(2147483647L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7fffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(65537L,1);
        factorsMap.put(17L,1);
        factorsMap.put(257L,1);
        factorsMap.put(3L,1);
        factorsMap.put(5L,1);
        longFactorsPowersOfTwoMinusOne.put(0xffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(23L,1);
        factorsMap.put(7L,1);
        factorsMap.put(89L,1);
        factorsMap.put(599479L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1ffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(131071L,1);
        factorsMap.put(3L,1);
        factorsMap.put(43691L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3ffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(71L,1);
        factorsMap.put(122921L,1);
        factorsMap.put(127L,1);
        factorsMap.put(31L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7ffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(19L,1);
        factorsMap.put(3L,3);
        factorsMap.put(5L,1);
        factorsMap.put(37L,1);
        factorsMap.put(7L,1);
        factorsMap.put(109L,1);
        factorsMap.put(73L,1);
        factorsMap.put(13L,1);
        longFactorsPowersOfTwoMinusOne.put(0xfffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(616318177L,1);
        factorsMap.put(223L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1fffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,1);
        factorsMap.put(524287L,1);
        factorsMap.put(174763L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3fffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(121369L,1);
        factorsMap.put(7L,1);
        factorsMap.put(79L,1);
        factorsMap.put(8191L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7fffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(61681L,1);
        factorsMap.put(17L,1);
        factorsMap.put(3L,1);
        factorsMap.put(5L,2);
        factorsMap.put(41L,1);
        factorsMap.put(11L,1);
        factorsMap.put(31L,1);
        longFactorsPowersOfTwoMinusOne.put(0xffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(164511353L,1);
        factorsMap.put(13367L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1ffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(5419L,1);
        factorsMap.put(3L,2);
        factorsMap.put(337L,1);
        factorsMap.put(7L,2);
        factorsMap.put(127L,1);
        factorsMap.put(43L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3ffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(9719L,1);
        factorsMap.put(431L,1);
        factorsMap.put(2099863L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7ffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,1);
        factorsMap.put(683L,1);
        factorsMap.put(2113L,1);
        factorsMap.put(5L,1);
        factorsMap.put(397L,1);
        factorsMap.put(23L,1);
        factorsMap.put(89L,1);
        longFactorsPowersOfTwoMinusOne.put(0xfffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(631L,1);
        factorsMap.put(7L,1);
        factorsMap.put(23311L,1);
        factorsMap.put(73L,1);
        factorsMap.put(31L,1);
        factorsMap.put(151L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1fffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(2796203L,1);
        factorsMap.put(3L,1);
        factorsMap.put(178481L,1);
        factorsMap.put(47L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3fffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(4513L,1);
        factorsMap.put(13264529L,1);
        factorsMap.put(2351L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7fffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(17L,1);
        factorsMap.put(257L,1);
        factorsMap.put(3L,2);
        factorsMap.put(5L,1);
        factorsMap.put(97L,1);
        factorsMap.put(7L,1);
        factorsMap.put(13L,1);
        factorsMap.put(673L,1);
        factorsMap.put(241L,1);
        longFactorsPowersOfTwoMinusOne.put(0xffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(127L,1);
        factorsMap.put(4432676798593L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1ffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(4051L,1);
        factorsMap.put(3L,1);
        factorsMap.put(251L,1);
        factorsMap.put(1801L,1);
        factorsMap.put(601L,1);
        factorsMap.put(11L,1);
        factorsMap.put(31L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3ffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(131071L,1);
        factorsMap.put(103L,1);
        factorsMap.put(7L,1);
        factorsMap.put(2143L,1);
        factorsMap.put(11119L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7ffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,1);
        factorsMap.put(2731L,1);
        factorsMap.put(1613L,1);
        factorsMap.put(157L,1);
        factorsMap.put(5L,1);
        factorsMap.put(53L,1);
        factorsMap.put(8191L,1);
        longFactorsPowersOfTwoMinusOne.put(0xfffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(6361L,1);
        factorsMap.put(20394401L,1);
        factorsMap.put(69431L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1fffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(262657L,1);
        factorsMap.put(19L,1);
        factorsMap.put(3L,4);
        factorsMap.put(7L,1);
        factorsMap.put(87211L,1);
        factorsMap.put(73L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3fffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(881L,1);
        factorsMap.put(23L,1);
        factorsMap.put(3191L,1);
        factorsMap.put(201961L,1);
        factorsMap.put(89L,1);
        factorsMap.put(31L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7fffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(17L,1);
        factorsMap.put(15790321L,1);
        factorsMap.put(3L,1);
        factorsMap.put(5L,1);
        factorsMap.put(113L,1);
        factorsMap.put(127L,1);
        factorsMap.put(43L,1);
        factorsMap.put(29L,1);
        longFactorsPowersOfTwoMinusOne.put(0xffffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(32377L,1);
        factorsMap.put(524287L,1);
        factorsMap.put(7L,1);
        factorsMap.put(1212847L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1ffffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(1103L,1);
        factorsMap.put(3L,1);
        factorsMap.put(233L,1);
        factorsMap.put(59L,1);
        factorsMap.put(3033169L,1);
        factorsMap.put(2089L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3ffffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(179951L,1);
        factorsMap.put(3203431780337L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7ffffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(1321L,1);
        factorsMap.put(3L,2);
        factorsMap.put(5L,2);
        factorsMap.put(7L,1);
        factorsMap.put(11L,1);
        factorsMap.put(41L,1);
        factorsMap.put(331L,1);
        factorsMap.put(13L,1);
        factorsMap.put(61L,1);
        factorsMap.put(31L,1);
        factorsMap.put(151L,1);
        longFactorsPowersOfTwoMinusOne.put(0xfffffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(2305843009213693951L,1);
        longFactorsPowersOfTwoMinusOne.put(0x1fffffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(3L,1);
        factorsMap.put(715827883L,1);
        factorsMap.put(2147483647L,1);
        longFactorsPowersOfTwoMinusOne.put(0x3fffffffffffffffL,factorsMap);
        factorsMap.clear();
        factorsMap.put(92737L,1);
        factorsMap.put(337L,1);
        factorsMap.put(649657L,1);
        factorsMap.put(7L,2);
        factorsMap.put(127L,1);
        factorsMap.put(73L,1);
        longFactorsPowersOfTwoMinusOne.put(0x7fffffffffffffffL,factorsMap);
    }
    static Map<BigInteger,Map<BigInteger,Integer>> bigIntegerFactorsPowersOfTwoMinusOne = new HashMap<BigInteger,Map<BigInteger,Integer>>(2000);
    static {
        Map<BigInteger,Integer> factorsMap = new HashMap<BigInteger,Integer>();
        factorsMap.put(new BigInteger("1",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("f",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1f",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("7",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3f",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7f",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("b",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("17",16),1);
        factorsMap.put(new BigInteger("59",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("d",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("1fff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("2b",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        factorsMap.put(new BigInteger("97",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("101",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("1ffff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("13",16),1);
        factorsMap.put(new BigInteger("3",16),3);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7ffff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("5",16),2);
        factorsMap.put(new BigInteger("29",16),1);
        factorsMap.put(new BigInteger("b",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("151",16),1);
        factorsMap.put(new BigInteger("7",16),2);
        factorsMap.put(new BigInteger("7f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("2ab",16),1);
        factorsMap.put(new BigInteger("17",16),1);
        factorsMap.put(new BigInteger("59",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("2b931",16),1);
        factorsMap.put(new BigInteger("2f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("d",16),1);
        factorsMap.put(new BigInteger("f1",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("709",16),1);
        factorsMap.put(new BigInteger("259",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("aab",16),1);
        factorsMap.put(new BigInteger("1fff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("40201",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("71",16),1);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("2b",16),1);
        factorsMap.put(new BigInteger("1d",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("44f",16),1);
        factorsMap.put(new BigInteger("e9",16),1);
        factorsMap.put(new BigInteger("829",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("b",16),1);
        factorsMap.put(new BigInteger("14b",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        factorsMap.put(new BigInteger("97",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7fffffff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("10001",16),1);
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("101",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("17",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("59",16),1);
        factorsMap.put(new BigInteger("925b7",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("1ffff",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("aaab",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("47",16),1);
        factorsMap.put(new BigInteger("1e029",16),1);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("13",16),1);
        factorsMap.put(new BigInteger("3",16),3);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("25",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("6d",16),1);
        factorsMap.put(new BigInteger("d",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("24bc44e1",16),1);
        factorsMap.put(new BigInteger("df",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("7ffff",16),1);
        factorsMap.put(new BigInteger("2aaab",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("1da19",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("4f",16),1);
        factorsMap.put(new BigInteger("1fff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("f0f1",16),1);
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("5",16),2);
        factorsMap.put(new BigInteger("b",16),1);
        factorsMap.put(new BigInteger("29",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("9ce3e79",16),1);
        factorsMap.put(new BigInteger("3437",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("152b",16),1);
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("151",16),1);
        factorsMap.put(new BigInteger("7",16),2);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("2b",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("25f7",16),1);
        factorsMap.put(new BigInteger("1af",16),1);
        factorsMap.put(new BigInteger("200a97",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("2ab",16),1);
        factorsMap.put(new BigInteger("841",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("18d",16),1);
        factorsMap.put(new BigInteger("17",16),1);
        factorsMap.put(new BigInteger("59",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("277",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("5b0f",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        factorsMap.put(new BigInteger("97",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("2aaaab",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("2b931",16),1);
        factorsMap.put(new BigInteger("2f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("11a1",16),1);
        factorsMap.put(new BigInteger("ca6691",16),1);
        factorsMap.put(new BigInteger("92f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("101",16),1);
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("61",16),1);
        factorsMap.put(new BigInteger("d",16),1);
        factorsMap.put(new BigInteger("2a1",16),1);
        factorsMap.put(new BigInteger("f1",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("40810204081",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("fd3",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("fb",16),1);
        factorsMap.put(new BigInteger("709",16),1);
        factorsMap.put(new BigInteger("259",16),1);
        factorsMap.put(new BigInteger("b",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("1ffff",16),1);
        factorsMap.put(new BigInteger("67",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("85f",16),1);
        factorsMap.put(new BigInteger("2b6f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("aab",16),1);
        factorsMap.put(new BigInteger("64d",16),1);
        factorsMap.put(new BigInteger("9d",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("35",16),1);
        factorsMap.put(new BigInteger("1fff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("18d9",16),1);
        factorsMap.put(new BigInteger("13731a1",16),1);
        factorsMap.put(new BigInteger("10f37",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("40201",16),1);
        factorsMap.put(new BigInteger("13",16),1);
        factorsMap.put(new BigInteger("3",16),4);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("154ab",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("371",16),1);
        factorsMap.put(new BigInteger("17",16),1);
        factorsMap.put(new BigInteger("c77",16),1);
        factorsMap.put(new BigInteger("314e9",16),1);
        factorsMap.put(new BigInteger("59",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("f0f0f1",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("71",16),1);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("2b",16),1);
        factorsMap.put(new BigInteger("1d",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7e79",16),1);
        factorsMap.put(new BigInteger("7ffff",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("1281af",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("44f",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("e9",16),1);
        factorsMap.put(new BigInteger("3b",16),1);
        factorsMap.put(new BigInteger("2e4851",16),1);
        factorsMap.put(new BigInteger("829",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("2beef",16),1);
        factorsMap.put(new BigInteger("2e9db69cff1",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("529",16),1);
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("5",16),2);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("29",16),1);
        factorsMap.put(new BigInteger("b",16),1);
        factorsMap.put(new BigInteger("14b",16),1);
        factorsMap.put(new BigInteger("d",16),1);
        factorsMap.put(new BigInteger("3d",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        factorsMap.put(new BigInteger("97",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("1fffffffffffffff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("2aaaaaab",16),1);
        factorsMap.put(new BigInteger("7fffffff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("16a41",16),1);
        factorsMap.put(new BigInteger("151",16),1);
        factorsMap.put(new BigInteger("9e9b9",16),1);
        factorsMap.put(new BigInteger("7",16),2);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffffffffff",16),factorsMap);

        factorsMap.clear();
        factorsMap.put(new BigInteger("10001",16),1);
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("101",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("281",16),1);
        factorsMap.put(new BigInteger("663d81",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("8425296b5bdf",16),1);
        factorsMap.put(new BigInteger("1fff",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("2ab",16),1);
        factorsMap.put(new BigInteger("17",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("43",16),1);
        factorsMap.put(new BigInteger("5179",16),1);
        factorsMap.put(new BigInteger("59",16),1);
        factorsMap.put(new BigInteger("925b7",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("b161194487",16),1);
        factorsMap.put(new BigInteger("b8bbec9",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("89",16),1);
        factorsMap.put(new BigInteger("1ffff",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("3b9",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("66cd",16),1);
        factorsMap.put(new BigInteger("aaab",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("2b931",16),1);
        factorsMap.put(new BigInteger("924925b6db7",16),1);
        factorsMap.put(new BigInteger("2f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("47",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("1e029",16),1);
        factorsMap.put(new BigInteger("1509b",16),1);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("2b",16),1);
        factorsMap.put(new BigInteger("119",16),1);
        factorsMap.put(new BigInteger("b",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("2e4b979",16),1);
        factorsMap.put(new BigInteger("37c7f",16),1);
        factorsMap.put(new BigInteger("cb06149",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("13",16),1);
        factorsMap.put(new BigInteger("9751",16),1);
        factorsMap.put(new BigInteger("3",16),3);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("25",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("1b1",16),1);
        factorsMap.put(new BigInteger("6d",16),1);
        factorsMap.put(new BigInteger("d",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        factorsMap.put(new BigInteger("f1",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("2310b9",16),1);
        factorsMap.put(new BigInteger("883c1153d41",16),1);
        factorsMap.put(new BigInteger("1b7",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("24bc44e1",16),1);
        factorsMap.put(new BigInteger("6f1",16),1);
        factorsMap.put(new BigInteger("df",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("189635b",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("a13e21",16),1);
        factorsMap.put(new BigInteger("189c1",16),1);
        factorsMap.put(new BigInteger("709",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("259",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        factorsMap.put(new BigInteger("97",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("80401",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("1c9",16),1);
        factorsMap.put(new BigInteger("7ffff",16),1);
        factorsMap.put(new BigInteger("e5",16),1);
        factorsMap.put(new BigInteger("2aaab",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("8112264cd9bb77f",16),1);
        factorsMap.put(new BigInteger("17",16),1);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("59",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("1da19",16),1);
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("aab",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("1554aab",16),1);
        factorsMap.put(new BigInteger("4f",16),1);
        factorsMap.put(new BigInteger("1fff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("103413e6cb7",16),1);
        factorsMap.put(new BigInteger("c0aba87",16),1);
        factorsMap.put(new BigInteger("a7f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("ff00ff01",16),1);
        factorsMap.put(new BigInteger("f0f1",16),1);
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("101",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("5",16),2);
        factorsMap.put(new BigInteger("29",16),1);
        factorsMap.put(new BigInteger("b",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("5d2914f",16),1);
        factorsMap.put(new BigInteger("40201",16),1);
        factorsMap.put(new BigInteger("a21",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("115cf",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("20e64c149",16),1);
        factorsMap.put(new BigInteger("9ce3e79",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("53",16),1);
        factorsMap.put(new BigInteger("3437",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("c4372f855d824ca58e9",16),1);
        factorsMap.put(new BigInteger("a7",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("152b",16),1);
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("3871",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("71",16),1);
        factorsMap.put(new BigInteger("151",16),1);
        factorsMap.put(new BigInteger("595",16),1);
        factorsMap.put(new BigInteger("7",16),2);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("2b",16),1);
        factorsMap.put(new BigInteger("1d",16),1);
        factorsMap.put(new BigInteger("d",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("1ffff",16),1);
        factorsMap.put(new BigInteger("84214a52b5ad7bdf",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("25f7",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("1af",16),1);
        factorsMap.put(new BigInteger("2aaaaaaaaab",16),1);
        factorsMap.put(new BigInteger("200a97",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("44f",16),1);
        factorsMap.put(new BigInteger("1051",16),1);
        factorsMap.put(new BigInteger("e9",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("829",16),1);
        factorsMap.put(new BigInteger("8f72eebe387",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("2ab",16),1);
        factorsMap.put(new BigInteger("841",16),1);
        factorsMap.put(new BigInteger("161",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("18d",16),1);
        factorsMap.put(new BigInteger("17",16),1);
        factorsMap.put(new BigInteger("aebbc991",16),1);
        factorsMap.put(new BigInteger("59",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("1ffffffffffffffffffffff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("13",16),1);
        factorsMap.put(new BigInteger("3",16),3);
        factorsMap.put(new BigInteger("277",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("b",16),1);
        factorsMap.put(new BigInteger("5b0f",16),1);
        factorsMap.put(new BigInteger("14b",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        factorsMap.put(new BigInteger("11f6e09",16),1);
        factorsMap.put(new BigInteger("97",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("6babc21",16),1);
        factorsMap.put(new BigInteger("38f",16),1);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("5634792f1",16),1);
        factorsMap.put(new BigInteger("1fff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("679",16),1);
        factorsMap.put(new BigInteger("2aaaab",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("763d",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("115",16),1);
        factorsMap.put(new BigInteger("2b931",16),1);
        factorsMap.put(new BigInteger("3f5",16),1);
        factorsMap.put(new BigInteger("2f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("924924936db6db7",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("7fffffff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("11b",16),1);
        factorsMap.put(new BigInteger("11a1",16),1);
        factorsMap.put(new BigInteger("26989325b1",16),1);
        factorsMap.put(new BigInteger("ca6691",16),1);
        factorsMap.put(new BigInteger("92f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("191492ff",16),1);
        factorsMap.put(new BigInteger("bf",16),1);
        factorsMap.put(new BigInteger("7ffff",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        factorsMap.put(new BigInteger("70fa3a01f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("10001",16),1);
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("101",16),1);
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("61",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("c1",16),1);
        factorsMap.put(new BigInteger("d",16),1);
        factorsMap.put(new BigInteger("1538f41",16),1);
        factorsMap.put(new BigInteger("2a1",16),1);
        factorsMap.put(new BigInteger("f1",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("2cb7",16),1);
        factorsMap.put(new BigInteger("b73493decfd9b68318ef9",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3f80fe03f81",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("2b",16),1);
        factorsMap.put(new BigInteger("40810204081",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7b2661a6f",16),1);
        factorsMap.put(new BigInteger("25831",16),1);
        factorsMap.put(new BigInteger("17",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("c7",16),1);
        factorsMap.put(new BigInteger("59",16),1);
        factorsMap.put(new BigInteger("925b7",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("fd3",16),1);
        factorsMap.put(new BigInteger("1fa5",16),1);
        factorsMap.put(new BigInteger("65",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("fb",16),1);
        factorsMap.put(new BigInteger("5",16),3);
        factorsMap.put(new BigInteger("709",16),1);
        factorsMap.put(new BigInteger("259",16),1);
        factorsMap.put(new BigInteger("29",16),1);
        factorsMap.put(new BigInteger("b",16),1);
        factorsMap.put(new BigInteger("418d5",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("6c279f03a0f",16),1);
        factorsMap.put(new BigInteger("4bbe4964e1a8b11",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("1ffff",16),1);
        factorsMap.put(new BigInteger("67",16),1);
        factorsMap.put(new BigInteger("133",16),1);
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("85f",16),1);
        factorsMap.put(new BigInteger("1981",16),1);
        factorsMap.put(new BigInteger("2b6f",16),1);
        factorsMap.put(new BigInteger("b29",16),1);
        factorsMap.put(new BigInteger("aaab",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("d79331b1cd9080adb9",16),1);
        factorsMap.put(new BigInteger("9800b777",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("aab",16),1);
        factorsMap.put(new BigInteger("9d",16),1);
        factorsMap.put(new BigInteger("64d",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("35",16),1);
        factorsMap.put(new BigInteger("12675361",16),1);
        factorsMap.put(new BigInteger("d1791",16),1);
        factorsMap.put(new BigInteger("1fff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("251e9",16),1);
        factorsMap.put(new BigInteger("47",16),1);
        factorsMap.put(new BigInteger("1e029",16),1);
        factorsMap.put(new BigInteger("7207",16),1);
        factorsMap.put(new BigInteger("151",16),1);
        factorsMap.put(new BigInteger("7",16),2);
        factorsMap.put(new BigInteger("1a0b9",16),1);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        factorsMap.put(new BigInteger("97",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("18d9",16),1);
        factorsMap.put(new BigInteger("13731a1",16),1);
        factorsMap.put(new BigInteger("19852f0d8ec1",16),1);
        factorsMap.put(new BigInteger("10f37",16),1);
        factorsMap.put(new BigInteger("6b",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7ffffffffffffffffffffffffff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("40201",16),1);
        factorsMap.put(new BigInteger("13",16),1);
        factorsMap.put(new BigInteger("3c1e1",16),1);
        factorsMap.put(new BigInteger("3",16),4);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("44221",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("25",16),1);
        factorsMap.put(new BigInteger("6d",16),1);
        factorsMap.put(new BigInteger("154ab",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        factorsMap.put(new BigInteger("d",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("2c76e2c7",16),1);
        factorsMap.put(new BigInteger("b83cbeccdc926056c109",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("371",16),1);
        factorsMap.put(new BigInteger("2ea586b",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("2ab",16),1);
        factorsMap.put(new BigInteger("b9b",16),1);
        factorsMap.put(new BigInteger("17",16),1);
        factorsMap.put(new BigInteger("c77",16),1);
        factorsMap.put(new BigInteger("b",16),2);
        factorsMap.put(new BigInteger("314e9",16),1);
        factorsMap.put(new BigInteger("59",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("24bc44e1",16),1);
        factorsMap.put(new BigInteger("df",16),1);
        factorsMap.put(new BigInteger("1303dcb9",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("1913ca1",16),1);
        factorsMap.put(new BigInteger("4e88f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("f0f0f1",16),1);
        factorsMap.put(new BigInteger("101",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("cab258ee1",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("71",16),1);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("2b",16),1);
        factorsMap.put(new BigInteger("1421",16),1);
        factorsMap.put(new BigInteger("1d",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("5aef",16),1);
        factorsMap.put(new BigInteger("d3f",16),1);
        factorsMap.put(new BigInteger("3ca43f3d97c6f",16),1);
        factorsMap.put(new BigInteger("101c9",16),1);
        factorsMap.put(new BigInteger("1c8319",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("7e79",16),1);
        factorsMap.put(new BigInteger("7ffff",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("9908251",16),1);
        factorsMap.put(new BigInteger("23b",16),1);
        factorsMap.put(new BigInteger("2aaab",16),1);
        factorsMap.put(new BigInteger("1281af",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3d9961",16),1);
        factorsMap.put(new BigInteger("3a67",16),1);
        factorsMap.put(new BigInteger("2b931",16),1);
        factorsMap.put(new BigInteger("2f",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        factorsMap.put(new BigInteger("966fc18022f69",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("44f",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("6664ccd",16),1);
        factorsMap.put(new BigInteger("e9",16),1);
        factorsMap.put(new BigInteger("3b",16),1);
        factorsMap.put(new BigInteger("2e4851",16),1);
        factorsMap.put(new BigInteger("829",16),1);
        factorsMap.put(new BigInteger("20008001",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("1da19",16),1);
        factorsMap.put(new BigInteger("1999",16),1);
        factorsMap.put(new BigInteger("15061",16),1);
        factorsMap.put(new BigInteger("3a9",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("4f",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        factorsMap.put(new BigInteger("1d2b61f99",16),1);
        factorsMap.put(new BigInteger("1fff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("2beef",16),1);
        factorsMap.put(new BigInteger("b11",16),1);
        factorsMap.put(new BigInteger("6cc31c19",16),1);
        factorsMap.put(new BigInteger("9133",16),1);
        factorsMap.put(new BigInteger("2e9db69cff1",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("ef",16),1);
        factorsMap.put(new BigInteger("1ffff",16),1);
        factorsMap.put(new BigInteger("eaa150caf",16),1);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("4f07",16),1);
        factorsMap.put(new BigInteger("1e867bff69",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("5",16),2);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("b",16),1);
        factorsMap.put(new BigInteger("29",16),1);
        factorsMap.put(new BigInteger("d",16),1);
        factorsMap.put(new BigInteger("f0f1",16),1);
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("529",16),1);
        factorsMap.put(new BigInteger("14b",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        factorsMap.put(new BigInteger("3d",16),1);
        factorsMap.put(new BigInteger("10feef011",16),1);
        factorsMap.put(new BigInteger("97",16),1);
        factorsMap.put(new BigInteger("f1",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("168c2661efceb3c3748ef748e7",16),1);
        factorsMap.put(new BigInteger("17",16),1);
        factorsMap.put(new BigInteger("59",16),1);
        factorsMap.put(new BigInteger("2d7",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffffffffffffffffffffffff",16),factorsMap);

        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("1fffffffffffffff",16),1);
        factorsMap.put(new BigInteger("aaaaaaaaaaaaaab",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("9ce3e79",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("2776572c79ed291",16),1);
        factorsMap.put(new BigInteger("3b4fc7",16),1);
        factorsMap.put(new BigInteger("3437",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("5df05",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("2aaaaaab",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("21e9",16),1);
        factorsMap.put(new BigInteger("15cd",16),1);
        factorsMap.put(new BigInteger("7fffffff",16),1);
        factorsMap.put(new BigInteger("c145",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3ea70096b1",16),1);
        factorsMap.put(new BigInteger("709",16),1);
        factorsMap.put(new BigInteger("259",16),1);
        factorsMap.put(new BigInteger("41606b48636df251",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("152b",16),1);
        factorsMap.put(new BigInteger("13",16),1);
        factorsMap.put(new BigInteger("3",16),3);
        factorsMap.put(new BigInteger("16a41",16),1);
        factorsMap.put(new BigInteger("151",16),1);
        factorsMap.put(new BigInteger("9e9b9",16),1);
        factorsMap.put(new BigInteger("7",16),2);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("2b",16),1);
        factorsMap.put(new BigInteger("11f703ee09",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7fffffffffffffffffffffffffffffff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("10001",16),1);
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("101",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("3d30f19cd101",16),1);
        factorsMap.put(new BigInteger("42f01",16),1);
        factorsMap.put(new BigInteger("281",16),1);
        factorsMap.put(new BigInteger("663d81",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("25f7",16),1);
        factorsMap.put(new BigInteger("1af",16),1);
        factorsMap.put(new BigInteger("924924924936db6db6db7",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("200a97",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7454ab",16),1);
        factorsMap.put(new BigInteger("64123",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("aab",16),1);
        factorsMap.put(new BigInteger("83",16),1);
        factorsMap.put(new BigInteger("b",16),1);
        factorsMap.put(new BigInteger("8425296b5bdf",16),1);
        factorsMap.put(new BigInteger("1fff",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7c97d9108c2ad4329db02eb8f166349",16),1);
        factorsMap.put(new BigInteger("107",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("2ab",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("43",16),1);
        factorsMap.put(new BigInteger("5179",16),1);
        factorsMap.put(new BigInteger("d",16),1);
        factorsMap.put(new BigInteger("841",16),1);
        factorsMap.put(new BigInteger("17",16),1);
        factorsMap.put(new BigInteger("18d",16),1);
        factorsMap.put(new BigInteger("420841",16),1);
        factorsMap.put(new BigInteger("59",16),1);
        factorsMap.put(new BigInteger("925b7",16),1);
        factorsMap.put(new BigInteger("4c585",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("7ffff",16),1);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("8102142852a54ad5ab5ebd7bf7f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("6fcfa9",16),1);
        factorsMap.put(new BigInteger("b161194487",16),1);
        factorsMap.put(new BigInteger("b8bbec9",16),1);
        factorsMap.put(new BigInteger("61b04216c33",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("40201",16),1);
        factorsMap.put(new BigInteger("277",16),1);
        factorsMap.put(new BigInteger("54f7f",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("5b0f",16),1);
        factorsMap.put(new BigInteger("10f",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        factorsMap.put(new BigInteger("2d72ec879791",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        factorsMap.put(new BigInteger("97",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("89",16),1);
        factorsMap.put(new BigInteger("11",16),2);
        factorsMap.put(new BigInteger("1ffff",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("3b9",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("29e66824961",16),1);
        factorsMap.put(new BigInteger("56981",16),1);
        factorsMap.put(new BigInteger("66cd",16),1);
        factorsMap.put(new BigInteger("aaab",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("126d9df90b42f22186f",16),1);
        factorsMap.put(new BigInteger("1bc894a5efde5b971",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("274a482261",16),1);
        factorsMap.put(new BigInteger("8b",16),1);
        factorsMap.put(new BigInteger("2aaaab",16),1);
        factorsMap.put(new BigInteger("3",16),2);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("2b931",16),1);
        factorsMap.put(new BigInteger("924925b6db7",16),1);
        factorsMap.put(new BigInteger("2f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("19043ef56cca6ea8fda319c31",16),1);
        factorsMap.put(new BigInteger("51dd9dbc32f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("2d3267d",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("47",16),1);
        factorsMap.put(new BigInteger("5",16),2);
        factorsMap.put(new BigInteger("1509b",16),1);
        factorsMap.put(new BigInteger("2b",16),1);
        factorsMap.put(new BigInteger("119",16),1);
        factorsMap.put(new BigInteger("b",16),1);
        factorsMap.put(new BigInteger("29",16),1);
        factorsMap.put(new BigInteger("1e029",16),1);
        factorsMap.put(new BigInteger("712a29",16),1);
        factorsMap.put(new BigInteger("71",16),1);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("1d",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("8f97384b16239e9",16),1);
        factorsMap.put(new BigInteger("104ce069f",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("11a1",16),1);
        factorsMap.put(new BigInteger("ca6691",16),1);
        factorsMap.put(new BigInteger("92f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1fffffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("2e4b979",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("37c7f",16),1);
        factorsMap.put(new BigInteger("cb06149",16),1);
        factorsMap.put(new BigInteger("cb097a80581",16),1);
        factorsMap.put(new BigInteger("35cbe2b",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3fffffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("b0cb9",16),1);
        factorsMap.put(new BigInteger("503e66e6e16f8c11",16),1);
        factorsMap.put(new BigInteger("17",16),1);
        factorsMap.put(new BigInteger("24fa95ea07",16),1);
        factorsMap.put(new BigInteger("59",16),1);
        factorsMap.put(new BigInteger("1fff",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7fffffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("241",16),1);
        factorsMap.put(new BigInteger("9751",16),1);
        factorsMap.put(new BigInteger("3",16),3);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("25",16),1);
        factorsMap.put(new BigInteger("7",16),1);
        factorsMap.put(new BigInteger("61",16),1);
        factorsMap.put(new BigInteger("1b1",16),1);
        factorsMap.put(new BigInteger("6d",16),1);
        factorsMap.put(new BigInteger("d",16),1);
        factorsMap.put(new BigInteger("49",16),1);
        factorsMap.put(new BigInteger("2a1",16),1);
        factorsMap.put(new BigInteger("11",16),1);
        factorsMap.put(new BigInteger("13",16),1);
        factorsMap.put(new BigInteger("101",16),1);
        factorsMap.put(new BigInteger("7194a10dc1",16),1);
        factorsMap.put(new BigInteger("f1",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("ffffffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("84210846318c6339ce739def7bdf",16),1);
        factorsMap.put(new BigInteger("44f",16),1);
        factorsMap.put(new BigInteger("e9",16),1);
        factorsMap.put(new BigInteger("829",16),1);
        factorsMap.put(new BigInteger("1f",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("1ffffffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("2310b9",16),1);
        factorsMap.put(new BigInteger("6d9",16),1);
        factorsMap.put(new BigInteger("883c1153d41",16),1);
        factorsMap.put(new BigInteger("18ec61f0e8e0b323",16),1);
        factorsMap.put(new BigInteger("1b7",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("3ffffffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("244925b49252490049237",16),1);
        factorsMap.put(new BigInteger("151",16),1);
        factorsMap.put(new BigInteger("7",16),3);
        factorsMap.put(new BigInteger("7f",16),1);
        factorsMap.put(new BigInteger("40810204081",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("7ffffffffffffffffffffffffffffffffffff",16),factorsMap);
        factorsMap.clear();
        factorsMap.put(new BigInteger("251",16),1);
        factorsMap.put(new BigInteger("24bc44e1",16),1);
        factorsMap.put(new BigInteger("6f1",16),1);
        factorsMap.put(new BigInteger("df",16),1);
        factorsMap.put(new BigInteger("3",16),1);
        factorsMap.put(new BigInteger("dd086b1",16),1);
        factorsMap.put(new BigInteger("5",16),1);
        factorsMap.put(new BigInteger("afef559",16),1);
        factorsMap.put(new BigInteger("95",16),1);
        factorsMap.put(new BigInteger("189635b",16),1);
        bigIntegerFactorsPowersOfTwoMinusOne.put(new BigInteger("fffffffffffffffffffffffffffffffffffff",16),factorsMap);

    }
}